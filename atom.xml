<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序员bingo</title>
  
  <subtitle>bingo的技术原创分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bingoli.github.io/"/>
  <updated>2020-03-09T16:53:10.799Z</updated>
  <id>https://bingoli.github.io/</id>
  
  <author>
    <name>程序员bingo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小心，定时器可能让你的CPU爆满</title>
    <link href="https://bingoli.github.io/2020/03/05/rust_tokio_interval_bug/"/>
    <id>https://bingoli.github.io/2020/03/05/rust_tokio_interval_bug/</id>
    <published>2020-03-05T21:03:11.000Z</published>
    <updated>2020-03-09T16:53:10.799Z</updated>
    
    <content type="html"><![CDATA[<p>使用rust tokio Interval作为定时器，可能会在系统休眠或进程挂起恢复后，CPU爆满，甚至导致死机，Windows、iOS、Android都有这个问题。</p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>虽然rust代码写得不多，但使用C++的性能分析方法论和工具链，也能分析rust代码的性能。这次，就是通过WPT（Windows Performance Tools）和Instruments分析了rust的第三方库tokio的Interval的一个性能问题。</p><h1 id="问题的发现"><a href="#问题的发现" class="headerlink" title="问题的发现"></a>问题的发现</h1><p>在Win10系统（CPU 12核）休眠恢复之后，发现rust进程的CPU占比超过6%，相当于1个CPU核的70%。于是，赶紧用WPT抓了一个现场。通过WPT分析，发现CPU主要被其中一个线程消耗。</p><p><img src="https://bingoli.github.io/tokio_interval_windows_cpu_high.png" alt="微信公众号：程序员bingo"></p><h1 id="其他平台的测试验证"><a href="#其他平台的测试验证" class="headerlink" title="其他平台的测试验证"></a>其他平台的测试验证</h1><p>由于rust代码是跨平台的SDK，因此，也需要验证下其他平台是否有同样的问题。</p><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p>使用Instruments抓了iOS与Windows类似场景，消耗CPU最多的也是这个线程。</p><p><img src="https://bingoli.github.io/tokio_interval_ios_cpu_high.png" alt="微信公众号：程序员bingo"></p><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>经过反复测试，未发现Mac有这个问题。</p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>经过反复测试，未发现Android有这个问题。（后来发现，是因为Android连上电脑是充电模式，进程不会自动挂起，没有进入到可复现这个问题的路径。）</p><h1 id="tokio的Interval的Demo实验"><a href="#tokio的Interval的Demo实验" class="headerlink" title="tokio的Interval的Demo实验"></a>tokio的Interval的Demo实验</h1><p>经过多平台的测试验证，发现Windows和iOS有这个问题，但是Mac没有发现这个问题，这就感觉到很迷糊了。通过WPT和Instruments的分析数据，已定位到相关代码，使用tokio的Interval运行一个定时任务，每隔1S执行1次。其中，tokio版本0.1.13。排查了自有代码，没有找到可能引起这个问题的代码。经过现象分析，推测可能跟tokio有关，于是，写了一个简化的Demo进行验证。</p><h2 id="实验代码说明"><a href="#实验代码说明" class="headerlink" title="实验代码说明"></a>实验代码说明</h2><p>创建一个循环定时器任务，每隔1S运行1次。在每次定时器任务触发时，输出以下调试信息：</p><ul><li>当前任务的序号</li><li>任务触发的绝对时间</li><li>Instant::now()获取的时间</li><li>当前任务的到期时间</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">test_interval</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> interval = Duration::from_millis(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">let</span> task = Interval::new_interval(interval)</span><br><span class="line">        .for_each(<span class="keyword">move</span> |deadline| &#123;</span><br><span class="line">            <span class="keyword">let</span> count = &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="keyword">mut</span> count = TIME_COUNT.write().unwrap();</span><br><span class="line">                *count += <span class="number">1</span>;</span><br><span class="line">                *count</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;&#125;, &#123;&#125;, now: &#123;:?&#125;, deadline: &#123;:?&#125;"</span>, count, Utc::now().format(<span class="string">"%T"</span>), Instant::now(), deadline);</span><br><span class="line">            <span class="literal">Ok</span>(())</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(|_| &#123;</span><br><span class="line">            <span class="literal">Ok</span>(())</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">        MY_RUNTIME.executor().spawn(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="系统休眠实验"><a href="#系统休眠实验" class="headerlink" title="系统休眠实验"></a>系统休眠实验</h2><p>由于Windows平台发现的问题，就是通过系统休眠的方式来发现的，因此，对Windows、Mac、Linux都进行了系统休眠实验。</p><p>实验方法：先让系统休眠一段时间（超过2分钟），然后重新激活系统，观察激活后的任务执行次数。如果系统重新激活后1S内，任务执行次数只有1-3次，属于没有问题；如果有大量任务执行，则是有问题的。</p><h3 id="Windows系统休眠实验结果"><a href="#Windows系统休眠实验结果" class="headerlink" title="Windows系统休眠实验结果"></a>Windows系统休眠实验结果</h3><ul><li>系统开始休眠时间：14:08:33。</li><li>激活系统时间：14:15:05。</li><li>系统激活后1S内，执行任务394次，存在问题。</li></ul><blockquote><p>1, 14:08:18, now: Instant { t: 1287693.9087257s }, deadline: Instant { t: 1287693.9079829s }<br>2, 14:08:19, now: Instant { t: 1287694.9086322s }, deadline: Instant { t: 1287694.9079829s }</p><hr><p>16, 14:08:33, now: Instant { t: 1287708.9085874s }, deadline: Instant { t: 1287708.9079829s }</p><hr><p>17, 14:15:05, now: Instant { t: 1288101.05249s }, deadline: Instant { t: 1287709.9079829s }<br>18, 14:15:05, now: Instant { t: 1288101.0528517s }, deadline: Instant { t: 1287710.9079829s }</p><hr><p>409, 14:15:06, now: Instant { t: 1288101.9091369s }, deadline: Instant { t: 1288101.9079829s }<br>410, 14:15:07, now: Instant { t: 1288102.9145323s }, deadline: Instant { t: 1288102.9079829s }<br>411, 14:15:08, now: Instant { t: 1288103.9128121s }, deadline: Instant { t: 1288103.9079829s }</p></blockquote><h3 id="Mac系统休眠实验结果"><a href="#Mac系统休眠实验结果" class="headerlink" title="Mac系统休眠实验结果"></a>Mac系统休眠实验结果</h3><ul><li>系统开始休眠时间：14:10:19。</li><li>激活系统时间：14:18:39。</li><li>结束休眠后1S内，执行任务1次，没有问题。</li></ul><blockquote><p>1, 14:09:50, now: Instant { t: 306133377041330 }, deadline: Instant { t: 306133373882499 }<br>2, 14:09:51, now: Instant { t: 306134375199583 }, deadline: Instant { t: 306134373882499 }</p><hr><p>30, 14:10:19, now: Instant { t: 306162380111871 }, deadline: Instant { t: 306162373882499 }</p><hr><p>31, 14:18:39, now: Instant { t: 306164208046139 }, deadline: Instant { t: 306163373882499 }<br>32, 14:18:40, now: Instant { t: 306164378924112 }, deadline: Instant { t: 306164373882499 }<br>33, 14:18:41, now: Instant { t: 306165379182917 }, deadline: Instant { t: 306165373882499 }<br>34, 14:18:42, now: Instant { t: 306166375919484 }, deadline: Instant { t: 306166373882499 }</p></blockquote><h2 id="Linux系统休眠实验结果"><a href="#Linux系统休眠实验结果" class="headerlink" title="Linux系统休眠实验结果"></a>Linux系统休眠实验结果</h2><p>使用的测试系统为ubuntu 18.04。</p><ul><li>进程开始休眠时间：11:10:11。</li><li>进程激活时间：11:31:52。</li><li>进程激活后1S内，执行任务2次，没有问题。</li></ul><blockquote><p>1, 11:09:58, now: Instant { tv_sec: 3437, tv_nsec: 200974533 }, deadline: Instant { tv_sec: 3437, tv_nsec: 199134350 }</p><hr><p>14, 11:10:11, now: Instant { tv_sec: 3450, tv_nsec: 200868087 }, deadline: Instant { tv_sec: 3450, tv_nsec: 199134350 }</p><hr><p>15, 11:31:52, now: Instant { tv_sec: 3452, tv_nsec: 388860753 }, deadline: Instant { tv_sec: 3451, tv_nsec: 199134350 }<br>16, 11:31:52, now: Instant { tv_sec: 3452, tv_nsec: 389004878 }, deadline: Instant { tv_sec: 3452, tv_nsec: 199134350 }<br>17, 11:31:53, now: Instant { tv_sec: 3453, tv_nsec: 201303263 }, deadline: Instant { tv_sec: 3453, tv_nsec: 199134350 }<br>18, 11:31:54, now: Instant { tv_sec: 3454, tv_nsec: 201269682 }, deadline: Instant { tv_sec: 3454, tv_nsec: 199134350 }</p></blockquote><h2 id="进程挂起实验"><a href="#进程挂起实验" class="headerlink" title="进程挂起实验"></a>进程挂起实验</h2><p>通过iOS之前的测试分析，iOS出现问题时，并不是系统休眠，而是进程挂起，于是，对移动端进行了进程挂起的实验。</p><h3 id="iOS进程挂起实验结果"><a href="#iOS进程挂起实验结果" class="headerlink" title="iOS进程挂起实验结果"></a>iOS进程挂起实验结果</h3><p>先运行进程，然后把进程切换到后台，等待一段时间后，把进程切换到前台，观察运行结果。</p><ul><li>进程开始休眠时间：09:40:07。</li><li>进程激活时间：09:41:56。</li><li>进程激活后1S内，运行了109次任务，存在问题。</li></ul><blockquote><p>1, 09:39:10, Instant { t: 8575538386338 }, Instant { t: 8575538224636 }</p><hr><p>58, 09:40:07, Instant { t: 8576906237923 }, Instant { t: 8576906224636 }</p><hr><p>59, 09:41:56, Instant { t: 8579507571088 }, Instant { t: 8576930224636 }<br>60, 09:41:56, Instant { t: 8579507573627 }, Instant { t: 8576954224636 }</p><hr><p>167, 09:41:56, Instant { t: 8579522286057 }, Instant { t: 8579522224636 }<br>168, 09:41:57, Instant { t: 8579546357653 }, Instant { t: 8579546224636 }<br>169, 09:41:58, Instant { t: 8579570335229 }, Instant { t: 8579570224636 }</p></blockquote><h3 id="Android进程挂起实验结果"><a href="#Android进程挂起实验结果" class="headerlink" title="Android进程挂起实验结果"></a>Android进程挂起实验结果</h3><p>在测试Android时，发现连上电脑后，手机处于充电模式，App切换到后台之后，仍然会运行，因此，切到后台的方式不能测试进程挂起。下面就通过打断点的方式，测试进程挂起恢复后的情况。</p><ul><li>进程开始挂起时间：08:51:01。</li><li>进程激活时间：08:55:25。</li><li>进程激活后1S内，运行任务264次，存在问题。</li></ul><blockquote><p>1, 08:50:48, now: Instant { tv_sec: 16422, tv_nsec: 449018405 }, deadline: Instant { tv_sec: 16422, tv_nsec: 446896405 }</p><hr><p>14, 08:51:01, now: Instant { tv_sec: 16435, tv_nsec: 449331405 }, deadline: Instant { tv_sec: 16435, tv_nsec: 446896405 }</p><hr><p>15, 08:55:25, now: Instant { tv_sec: 16698, tv_nsec: 727410405 }, deadline: Instant { tv_sec: 16436, tv_nsec: 446896405 }</p><hr><p>278, 08:55:25, now: Instant { tv_sec: 16699, tv_nsec: 449296405 }, deadline: Instant { tv_sec: 16699, tv_nsec: 446896405 }<br>279, 08:55:26, now: Instant { tv_sec: 16700, tv_nsec: 450704405 }, deadline: Instant { tv_sec: 16700, tv_nsec: 446896405 }<br>280, 08:55:27, now: Instant { tv_sec: 16701, tv_nsec: 449870405 }, deadline: Instant { tv_sec: 16701, tv_nsec: 446896405 }<br>281, 08:55:28, now: Instant { tv_sec: 16702, tv_nsec: 449879405 }, deadline: Instant { tv_sec: 16702, tv_nsec: 446896405 }</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过以上的实验结果证明，测试代码能复现相同场景问题，因此，这个问题跟tokio的Interval有关。</p><ul><li>系统休眠恢复后，Windows有此问题，Mac和Linux无此问题。</li><li>进程挂起恢复后，iOS和Android都有此问题。同时，经过推测，Windows、Mac、Linux的进程挂起，也会有此问题。</li></ul><h1 id="tokio源码分析"><a href="#tokio源码分析" class="headerlink" title="tokio源码分析"></a>tokio源码分析</h1><p>下面就研究tokio的相关源码来分析问题原因。</p><h2 id="Interval的实现原理"><a href="#Interval的实现原理" class="headerlink" title="Interval的实现原理"></a>Interval的实现原理</h2><p>Interval处理定时器到期的函数为poll，主要作用是设置下一次定时器到期的时间。这里是通过本次到期时间加上定时器时间间隔，作为下一次到期的时间。这里使用的是相对时间，因此，每一次循环都需要执行。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Stream <span class="keyword">for</span> Interval &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">poll</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; Poll&lt;<span class="built_in">Option</span>&lt;Self::Item&gt;, Self::Error&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> _ = try_ready!(<span class="keyword">self</span>.delay.poll());</span><br><span class="line">        <span class="comment">// 这里使用的当前时间是上次定时器到期的时间</span></span><br><span class="line">        <span class="keyword">let</span> now = <span class="keyword">self</span>.delay.deadline();</span><br><span class="line">        <span class="comment">// 然后用上次到期时间加上时间间隔，作为下一次触发定时器的时间</span></span><br><span class="line">        <span class="keyword">self</span>.delay.reset(now + <span class="keyword">self</span>.duration);</span><br><span class="line"></span><br><span class="line">        <span class="literal">Ok</span>(<span class="literal">Some</span>(now).into())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定时器的等待时间和唤醒的处理，是由Timer类的park和unpark函数实现。park是处理定时器等待的函数，通过当前实时时间和下一次定时器到期时间对比，判断定时器是否到期。如果定时器未到期，则会进入park_timeout进行剩余时间的等待。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;T, N&gt; Park <span class="keyword">for</span> Timer&lt;T, N&gt;</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    T: Park,</span><br><span class="line">    N: Now,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Unpark</span></span> = T::Unpark;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Error</span></span> = T::Error;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">unpark</span></span>(&amp;<span class="keyword">self</span>) -&gt; Self::Unpark &#123;</span><br><span class="line">        <span class="keyword">self</span>.park.unpark()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">park</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; <span class="built_in">Result</span>&lt;(), Self::Error&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.process_queue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span>.wheel.poll_at() &#123;</span><br><span class="line">            <span class="literal">Some</span>(when) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 获取当前的实时时间,调用的是Instant::now()</span></span><br><span class="line">                <span class="keyword">let</span> now = <span class="keyword">self</span>.now.now();</span><br><span class="line">                <span class="comment">// 本次定时器到期的时间</span></span><br><span class="line">                <span class="keyword">let</span> deadline = <span class="keyword">self</span>.expiration_instant(when);</span><br><span class="line">                <span class="comment">// 如果定时器未到期，会进行等待</span></span><br><span class="line">                <span class="keyword">if</span> deadline &gt; now &#123;</span><br><span class="line">                    <span class="keyword">self</span>.park.park_timeout(deadline - now)?;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">self</span>.park.park_timeout(Duration::from_secs(<span class="number">0</span>))?;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                <span class="keyword">self</span>.park.park()?;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.process();</span><br><span class="line"></span><br><span class="line">        <span class="literal">Ok</span>(())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面几个函数的逻辑判断，Timer的等待和唤醒的处理使用的是实时时间，而Interval的定时器到期处理使用了相对时间。系统休眠或者进程挂起会导致相对时间暂停，休眠恢复后，就可能导致休眠期间的任务累加到休眠恢复后执行，从而导致短期内CPU消耗高。这个逻辑推断，正好验证了前面在Windows平台中发现的问题。但是，为什么Mac平台下没有和Windows一样的问题呢？这个跟Instant的实现原理有关。</p><h2 id="Instant的实现原理"><a href="#Instant的实现原理" class="headerlink" title="Instant的实现原理"></a>Instant的实现原理</h2><p>Timer的park函数获取实时时间是调用的Instant::now()函数，这个函数是获取了系统当前时间，通过查看源码和测试发现，各平台的Instant::now()的实现原理不一样。</p><h3 id="Instant-now-的Windows相关源码"><a href="#Instant-now-的Windows相关源码" class="headerlink" title="Instant::now()的Windows相关源码"></a>Instant::now()的Windows相关源码</h3><p>Windows系统中，Instant::now()调用的是QueryPerformanceCounter函数。经过测试，这个函数的时间计算包括系统休眠时间。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Instant &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">now</span></span>() -&gt; Instant &#123;</span><br><span class="line">        perf_counter::PerformanceCounterInstant::now().into()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">mod</span> perf_counter &#123;</span><br><span class="line">    <span class="keyword">impl</span> PerformanceCounterInstant &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">now</span></span>() -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">            <span class="keyword">Self</span> &#123; ts: query() &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">query</span></span>() -&gt; c::LARGE_INTEGER &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> qpc_value: c::LARGE_INTEGER = <span class="number">0</span>;</span><br><span class="line">        cvt(<span class="keyword">unsafe</span> &#123; c::QueryPerformanceCounter(&amp;<span class="keyword">mut</span> qpc_value) &#125;).unwrap();</span><br><span class="line">        qpc_value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Instant-now-的Mac和iOS相关源码"><a href="#Instant-now-的Mac和iOS相关源码" class="headerlink" title="Instant::now()的Mac和iOS相关源码"></a>Instant::now()的Mac和iOS相关源码</h3><p>Mac和iOS系统中，Instant::now()调用的是mach_absolute_time函数。查看苹果的开发者文档得知，mach_absolute_time的时间不包括系统休眠的时间。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Instant &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">now</span></span>() -&gt; Instant &#123;</span><br><span class="line">        <span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line">            <span class="function"><span class="keyword">fn</span> <span class="title">mach_absolute_time</span></span>() -&gt; <span class="built_in">u64</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Instant &#123; t: <span class="keyword">unsafe</span> &#123; mach_absolute_time() &#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mach-absolute-time在苹果开发者文档中的说明如下："><a href="#mach-absolute-time在苹果开发者文档中的说明如下：" class="headerlink" title="mach_absolute_time在苹果开发者文档中的说明如下："></a>mach_absolute_time在苹果开发者文档中的说明如下：</h3><blockquote><p>mach_absolute_time<br>Returns current value of a clock that increments monotonically in tick units (starting at an arbitrary point), this clock does not increment while the system is asleep.</p></blockquote><h3 id="Instant-now-的Android和Linux相关源码"><a href="#Instant-now-的Android和Linux相关源码" class="headerlink" title="Instant::now()的Android和Linux相关源码"></a>Instant::now()的Android和Linux相关源码</h3><p>Android和Linux系统中，Instant::now()调用的是clock_gettime函数。查看相关资料得知，clock_gettime的CLOCK_MONOTONIC的时间不包括系统休眠的时间。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Instant &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">now</span></span>() -&gt; Instant &#123;</span><br><span class="line">        Instant &#123; t: now(libc::CLOCK_MONOTONIC) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">now</span></span>(clock: clock_t) -&gt; Timespec &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> t = Timespec &#123; t: libc::timespec &#123; tv_sec: <span class="number">0</span>, tv_nsec: <span class="number">0</span> &#125; &#125;;</span><br><span class="line">    cvt(<span class="keyword">unsafe</span> &#123; libc::clock_gettime(clock, &amp;<span class="keyword">mut</span> t.t) &#125;).unwrap();</span><br><span class="line">    t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在StackOverflow查到的关于clock_gettime的问题回答如下：</p><blockquote><p>Note that on Linux, CLOCK_MONOTONIC does not measure time spent in suspend, although by the POSIX definition it should. You can use the Linux-specific CLOCK_BOOTTIME for a monotonic clock that keeps running during suspend.<br><a href="https://stackoverflow.com/questions/3523442/difference-between-clock-realtime-and-clock-monotonic" target="_blank" rel="noopener">https://stackoverflow.com/questions/3523442/difference-between-clock-realtime-and-clock-monotonic</a></p></blockquote><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>Windows的实时时间计算会包括系统休眠时间。Mac、iOS、Android、Linux的实时时间计算不包括系统休眠时间。</p><table><thead><tr><th>系统</th><th>Instant调用函数</th><th>是否包括系统休眠时间</th></tr></thead><tbody><tr><td>Windows</td><td>QueryPerformanceCounter</td><td>是</td></tr><tr><td>Mac、iOS</td><td>mach_absolute_time</td><td>否</td></tr><tr><td>Android、Linux</td><td>clock_gettime (Monotonic Clock)</td><td>否</td></tr></tbody></table><h1 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h1><p>通过以上的分析，得出结论：</p><ul><li>Windows的系统休眠恢复后有问题，是因为Windows平台的Instant的时间计算包括系统休眠时间。</li><li>所有系统的进程挂起都有问题，是因为Instant的时间计算包括进程挂起时间。</li></ul><p>要想解决这个问题，要么弃用tokio::timer::Interval，或者修改Interval的代码。</p><h2 id="Interval的修改建议"><a href="#Interval的修改建议" class="headerlink" title="Interval的修改建议"></a>Interval的修改建议</h2><p>要解决这个问题，重点是要使用系统时间来计算下一次定时器的到期时间。但是这种修复不一定符合tokio库对Interval的设计，只适合修改之后自己使用。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Stream <span class="keyword">for</span> Interval &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">poll</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) -&gt; Poll&lt;<span class="built_in">Option</span>&lt;Self::Item&gt;, Self::Error&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> _ = try_ready!(<span class="keyword">self</span>.delay.poll());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let now = self.delay.deadline();</span></span><br><span class="line">        <span class="keyword">let</span> now = Instant::now();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.delay.reset(now + <span class="keyword">self</span>.duration);</span><br><span class="line"></span><br><span class="line">        <span class="literal">Ok</span>(<span class="literal">Some</span>(now).into())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文使用的tokio版本为0.1.13，但看了目前最新的0.2.13，也是同样的实现方式。</p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用rust tokio Interval作为定时器，可能会在系统休眠或进程挂起恢复后，CPU爆满，甚至导致死机，Windows、iOS、Android都有这个问题。&lt;/p&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="WPT" scheme="https://bingoli.github.io/tags/WPT/"/>
    
      <category term="rust" scheme="https://bingoli.github.io/tags/rust/"/>
    
      <category term="tokio" scheme="https://bingoli.github.io/tags/tokio/"/>
    
      <category term="Instruments" scheme="https://bingoli.github.io/tags/Instruments/"/>
    
  </entry>
  
  <entry>
    <title>LSP异常导致Electron启动不了的问题分析</title>
    <link href="https://bingoli.github.io/2020/02/02/lsp_not_found/"/>
    <id>https://bingoli.github.io/2020/02/02/lsp_not_found/</id>
    <published>2020-02-02T20:01:25.000Z</published>
    <updated>2020-03-09T16:53:10.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>接到用户反馈，基于electron的应用都无法启动，包括VSCode，点击快捷方式，没有任何反应。非electron的其他软件正常，如Chrome。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><h2 id="判断进程是否启动"><a href="#判断进程是否启动" class="headerlink" title="判断进程是否启动"></a>判断进程是否启动</h2><p>从用户角度感知，完全看不到electron进程的启动。因此，需要先用工具判断下，electron启动进行到了哪一步。使用Process Monitor监控electron启动过程发现，只有主进程的UI线程启动了，其他进程和线程没有启动。</p><h2 id="通过Windbg捕获到启动异常"><a href="#通过Windbg捕获到启动异常" class="headerlink" title="通过Windbg捕获到启动异常"></a>通过Windbg捕获到启动异常</h2><p>既然进程能够启动，就可使用windbg来调试electron。使用Windbg启动electron后，electron会先中断，可通过g命令让软件继续运行。当发生异常时，Windbg也会自动中断，而此时，异常出现了。</p><h2 id="Windbg符号加载"><a href="#Windbg符号加载" class="headerlink" title="Windbg符号加载"></a>Windbg符号加载</h2><p>由于在用户机器上操作，因此，需要把electron.exe符号拷贝到用户机器上。要知道该把符号拷贝到哪个目录，就得了解Windbg的符号加载路径，可使用!sym noisy开启加载符号的日志输出，通过日志查看Windbg的加载electron.exe.pdb的路径。</p><blockquote><p>0:000&gt; !sym noisy</p></blockquote><p>使用.reload /f electron.exe可立即加载electron的符号。</p><blockquote><p>0:000&gt; .reload /f electron.exe<br>SYMSRV:  BYINDEX: 0xB<br>         c:\symbols*<a href="http://msdl.microsoft.com/download/symbols" target="_blank" rel="noopener">http://msdl.microsoft.com/download/symbols</a><br>         electron.exe.pdb<br>         A5C8652F254ECEFA4C4C44205044422E1<br>SYMSRV:  UNC: c:\symbols\electron.exe.pdb\A5C8652F254ECEFA4C4C44205044422E1\electron.exe.pdb - path not found<br>SYMSRV:  UNC: c:\symbols\electron.exe.pdb\A5C8652F254ECEFA4C4C44205044422E1\electron.exe.pd_ - path not found<br>SYMSRV:  UNC: c:\symbols\electron.exe.pdb\A5C8652F254ECEFA4C4C44205044422E1\file.ptr - path not found<br>SYMSRV:  HTTPGET: /download/symbols/electron.exe.pdb/A5C8652F254ECEFA4C4C44205044422E1/electron.exe.pdb<br>SYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND<br>SYMSRV:  HTTPGET: /download/symbols/electron.exe.pdb/A5C8652F254ECEFA4C4C44205044422E1/electron.exe.pd_<br>SYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND<br>SYMSRV:  HTTPGET: /download/symbols/electron.exe.pdb/A5C8652F254ECEFA4C4C44205044422E1/file.ptr<br>SYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND<br>SYMSRV:  RESULT: 0x80190194<br>DBGHELP: electron.exe.pdb - file not found</p></blockquote><p>通过日志看出，Windbg会去多个路径中搜索electron.exe.pdb，我们只需要把electron.exe.pdb放到其中一个路径即可。把electron.exe.pdb放到c:\symbols\electron.exe.pdb\A5C8652F254ECEFA4C4C44205044422E1\目录下，然后，再次加载electron的符号。</p><blockquote><p>0:000&gt; .reload /f electron.exe<br>SYMSRV:  BYINDEX: 0xD<br>         c:\symbols*<a href="http://msdl.microsoft.com/download/symbols" target="_blank" rel="noopener">http://msdl.microsoft.com/download/symbols</a><br>         electron.exe.pdb<br>         A5C8652F254ECEFA4C4C44205044422E1<br>SYMSRV:  PATH: c:\symbols\electron.exe.pdb\A5C8652F254ECEFA4C4C44205044422E1\electron.exe.pdb<br>SYMSRV:  RESULT: 0x00000000<br>DBGHELP: c:\symbols\electron.exe.pdb\A5C8652F254ECEFA4C4C44205044422E1\electron.exe.pdb - mismatched pdb<br>DBGHELP: electron.exe.pdb - file not found<br>DBGHELP: Couldn’t load mismatched pdb for electron.exe</p></blockquote><p>这次符号还是加载失败了，原因是pdb不匹配。pdb之所以不匹配，是以为对编译后的electron.exe进行了部分修改。通过查询.reload的帮助文档，发现通过/i可强制加载guid不匹配的pdb。</p><blockquote><p>0:000&gt; .reload /f /i electron.exe<br>SYMSRV:  BYINDEX: 0x11<br>         c:\symbols*<a href="http://msdl.microsoft.com/download/symbols" target="_blank" rel="noopener">http://msdl.microsoft.com/download/symbols</a><br>         electron.exe.pdb<br>         A5C8652F254ECEFA4C4C44205044422E1<br>SYMSRV:  PATH: c:\symbols\electron.exe.pdb\A5C8652F254ECEFA4C4C44205044422E1\electron.exe.pdb<br>SYMSRV:  RESULT: 0x00000000<br>DBGHELP: c:\symbols\electron.exe.pdb\A5C8652F254ECEFA4C4C44205044422E1\electron.exe.pdb - mismatched pdb<br>DBGHELP: electron.exe.pdb - file not found<br>DBGHELP: Loaded mismatched pdb for electron.exe<br>*** WARNING: Unable to verify timestamp for electron.exe<br>DBGHELP: electron - private symbols &amp; lines<br>        c:\symbols\electron.exe.pdb\A5C8652F254ECEFA4C4C44205044422E1\electron.exe.pdb - unmatched</p></blockquote><h2 id="通过反汇编代码定位socket创建失败"><a href="#通过反汇编代码定位socket创建失败" class="headerlink" title="通过反汇编代码定位socket创建失败"></a>通过反汇编代码定位socket创建失败</h2><p>成功加载符号之后，就可通过kv命令查看调用栈的详情了。</p><blockquote><p>0:000&gt; kv<br> # ChildEBP RetAddr  Args to Child<br>WARNING: Stack unwind information not available. Following frames may be wrong.<br>00 0042f8f0 04602b95 0000277a 0531269a 00000274 KERNELBASE+0x133e8<br>01 0042fd10 035564e2 0042fd2c 035414ed 05ec9bc0 electron!uv_winsock_init+0x1a1 (FPO: [0,0,0]) (CONV: cdecl) [D:\Project\electron-gn\src\third_party\electron_node\deps\uv\src\win\winsock.c @ 0]<br>02 0042fd18 035414ed 05ec9bc0 00000031 00000045 electron!uv_init+0x32 (FPO: [0,0,4]) (CONV: cdecl) [D:\Project\electron-gn\src\third_party\electron_node\deps\uv\src\win\core.c @ 208]<br>03 0042fd2c 03556486 060660e4 035564b0 0042fd44 electron!uv_once+0x2d (FPO: [2,0,0]) (CONV: cdecl) [D:\Project\electron-gn\src\third_party\electron_node\deps\uv\src\win\thread.c @ 73]<br>04 0042fd3c 0354c158 0042fd5c 045e36e6 045de150 electron!uv__once_init+0x12 (FPO: [0,0,4]) (CONV: cdecl) [D:\Project\electron-gn\src\third_party\electron_node\deps\uv\src\win\core.c @ 315]<br>05 0042fd44 045e36e6 045de150 0042fd5c d83a75b0 electron!uv_hrtime+0x8 (FPO: [0,0,4]) (CONV: cdecl) [D:\Project\electron-gn\src\third_party\electron_node\deps\uv\src\win\util.c @ 454]<br>06 0042fd5c 051fcc3e 00000000 00000000 fffde000 electron!_GLOBAL__sub_I_node_perf.cc+0x16 (FPO: [0,0,0]) (CONV: cdecl) [D:\Project\electron-gn\src\third_party\electron_node\src\node_perf.cc @ 0]<br>07 0042fd74 051e4d7e 05ec9afc 05ec9c10 d83a7554 electron!_initterm+0x38 (FPO: [Non-Fpo]) (CONV: cdecl) [D:\Project\electron-gn\src\out\Release-x86\minkernel\crts\ucrt\src\appcrt\startup\initterm.cpp @ 16]<br>08 0042fdb8 76c0343d fffde000 0042fe04 77389802 electron!__scrt_common_main_seh+0x7c (FPO: [Non-Fpo]) (CONV: cdecl) [d:\agent_work\6\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 256]<br>09 0042fdc4 77389802 fffde000 763d9ed3 00000000 kernel32+0x1343d<br>0a 0042fe04 773897d5 051e4e80 fffde000 00000000 ntdll+0x39802<br>0b 0042fe1c 00000000 051e4e80 fffde000 00000000 ntdll+0x397d5</p></blockquote><p>通过调用栈看出，异常发生在winsock.c文件的uv_winsock_init函数，但是没有精确匹配到具体的代码行。由于pdb文件是强制匹配的，也有可能存在pdb和exe的配对存在问题。因此，进行了多种可能性分析和反复推敲论证。过程略过不讲，只讲结论。在调用栈中，重点关注了KERNELBASE函数的两个参数，</p><ul><li>0000277a</li><li>0531269a</li></ul><p>其中051d269a是指向字符串”socket”的指针。说明这行代码应该是匹配错了。</p><blockquote><p>0:000&gt; da 051d269a<br>051d269a  “socket”</p></blockquote><p>在uv_winsock_init函数内查找会使用”socket”作为函数参数的代码，找到了2行完全一行的代码，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv_fatal_error(WSAGetLastError(), <span class="string">"socket"</span>);</span><br></pre></td></tr></table></figure><p>阅读代码发现，有两段代码的处理逻辑类似，一个是处理ipv4，一个是处理ipv6。下面就以ipv4的处理为分析对象。通过完整的代码分析，出现上面这种情况，是创建socke失败了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Detect non-IFS LSPs */</span></span><br><span class="line">dummy = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dummy != INVALID_SOCKET) &#123;</span><br><span class="line">  opt_len = (<span class="keyword">int</span>) <span class="keyword">sizeof</span> protocol_info;</span><br><span class="line">  <span class="keyword">if</span> (getsockopt(dummy,</span><br><span class="line">                 SOL_SOCKET,</span><br><span class="line">                 SO_PROTOCOL_INFOW,</span><br><span class="line">                 (<span class="keyword">char</span>*) &amp;protocol_info,</span><br><span class="line">                 &amp;opt_len) == SOCKET_ERROR)</span><br><span class="line">    uv_fatal_error(WSAGetLastError(), <span class="string">"getsockopt"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!(protocol_info.dwServiceFlags1 &amp; XP1_IFS_HANDLES))</span><br><span class="line">    uv_tcp_non_ifs_lsp_ipv4 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (closesocket(dummy) == SOCKET_ERROR)</span><br><span class="line">    uv_fatal_error(WSAGetLastError(), <span class="string">"closesocket"</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!error_means_no_support(WSAGetLastError())) &#123;</span><br><span class="line">  <span class="comment">/* Any error other than "socket type not supported" is fatal. */</span></span><br><span class="line">  uv_fatal_error(WSAGetLastError(), <span class="string">"socket"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据函数uv_fatal_error的参数压栈顺序，051d269a是第2个参数，0000277a是第1个参数，也就是WSAGetLastError()的返回值，转换为十进制为10106。</p><h2 id="socket创建失败的原因"><a href="#socket创建失败的原因" class="headerlink" title="socket创建失败的原因"></a>socket创建失败的原因</h2><p>创建socket失败的错误代码是10106，查询MSDN得知，10106对应的错误类型是WSAEPROVIDERFAILEDINIT。</p><blockquote><p>WSAEPROVIDERFAILEDINIT<br>10106<br>Service provider failed to initialize.The requested service provider could not be loaded or initialized. This error is returned if either a service provider’s DLL could not be loaded (LoadLibrary failed) or the provider’s WSPStartup or NSPStartup function failed.</p></blockquote><p>出现该错误时，可能是某个dll加载失败了。而加载dll，会有文件IO操作，可通过Process Monitor捕获这次IO操作。于是，打开Process Monitor，重复electron的运行步骤，通过抓取到的IO操作发现，加载netlsp.dll时失败了。</p><p><img src="https://bingoli.github.io/lsp_dll_not_found.png" alt="微信公众号：程序员bingo"></p><h2 id="LSP问题排查"><a href="#LSP问题排查" class="headerlink" title="LSP问题排查"></a>LSP问题排查</h2><p>通过调查netlsp.dll发现，这应该是一个LSP文件。LSP（Layered Service Provider）简单来说，就是会对socket的网络操作进行拦截过滤。那就先排查LSP的问题，在命令行窗口中输入netsh winsock show catalog可查看与Winsock有关的设置。通过逐项排查发现，C:\ProgramData\Microsoft\Windows\Provider\目录下的netlsp.dll和netlspx.dll都不存在，这个跟Process Monitor发现的结论一致。初步判断，electron启动失败会跟这两个LSP设置有关，需要把这两个文件有关的LSP项都删除。</p><blockquote><p>C:>netsh winsock show catalog</p><p>Winsock 目录提供程序项<br>-—————————————————–<br>项类型:                             分层链项<br>描述:                               NAT WLAN RAM over [RSVP TCPv6 服务提供商]<br>提供程序 ID:                        {FC0F29CD-9005-4E5C-80AF-1C4888AB67D8}<br>提供程序路径:                       C:\ProgramData\Microsoft\Windows\Provider\netlspx.dll</p><p>-—————————————————–<br>项类型:                             分层链项(32)<br>描述:                               NAT WLAN RAM over [MSAFD Tcpip [TCP/IPv6]]<br>提供程序 ID:                        {BD284F3E-2E68-4A48-9648-B932F612EA56}<br>提供程序路径:                       C:\ProgramData\Microsoft\Windows\Provider\netlsp.dll</p></blockquote><h2 id="LSP问题修复方法"><a href="#LSP问题修复方法" class="headerlink" title="LSP问题修复方法"></a>LSP问题修复方法</h2><p>找到了问题的根源，最后一步就是搜索如何修复LSP问题了。可通过Windows系统命令修复，也可以通过第三方工具修复。</p><p>系统命令修复操作如下：</p><blockquote><p>C:>netsh winsock reset</p><p>成功地重置 Winsock 目录。<br>你必须重新启动计算机才能完成重置。</p></blockquote><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>重置LSP设置之后，electron能够正常运行了，问题解决。通过现有线索判断，这个问题的根源，是第三方软件卸载LSP的时候，只把DLL删除了，但是没有把注册表清理干净。</p><h1 id="特殊说明"><a href="#特殊说明" class="headerlink" title="特殊说明"></a>特殊说明</h1><p>删除LSP也可能会导致整个电脑上不网，因此操作要谨慎，建议找专业人士操作。</p><h1 id="补充：被pdb误导的一个分析过程"><a href="#补充：被pdb误导的一个分析过程" class="headerlink" title="补充：被pdb误导的一个分析过程"></a>补充：被pdb误导的一个分析过程</h1><p>由于pdb匹配错误，所以之前就一直基于pdb匹配来做分析，最后发现了部分参数跟推导过程冲突，才转向去分析调用参数的正确思路。</p><h2 id="为什么调用栈不能显示正确的代码行数"><a href="#为什么调用栈不能显示正确的代码行数" class="headerlink" title="为什么调用栈不能显示正确的代码行数"></a>为什么调用栈不能显示正确的代码行数</h2><p>看下通过kv看到的调用栈，发现匹配的代码行是winsock.c的0。这个是为什么呢？</p><blockquote><p>01 0042fd10 035564e2 0042fd2c 035414ed 05ec9bc0 Lark!uv_winsock_init+0x1a1 (FPO: [0,0,0]) (CONV: cdecl) [D:\Project\electron-gn\src\third_party\electron_node\deps\uv\src\win\winsock.c @ 0] </p></blockquote><p>这时，可通过反汇编来精确定位出现问题的代码行。先反汇编uv_winsock_init+0x1a1的代码。</p><blockquote><p>0:000&gt; u lark!uv_winsock_init+0x1a1<br>lark!uv_winsock_init+0x1a1 [D:\Project\electron-gn\src\third_party\electron_node\deps\uv\src\win\winsock.c @ 0]:<br>044c2b55 ff15ccb1e905    call    dword ptr [lark!_imp__WSAGetLastError (05e9b1cc)]<br>044c2b5b 681f837705      push    offset lark!`string (0577831f)<br>044c2b60 50              push    eax<br>044c2b61 e84ec9f5ff      call    lark!uv_fatal_error (0441f4b4)</p></blockquote><p>call命令调用的是函数，可以跟C++中的代码匹配。反汇编代码里有使用常量字符串，通过da命令查看字符串的值。</p><blockquote><p>0:000&gt; da 0577831f<br>0577831f  “getsockopt”</p></blockquote><p>结合函数调用和字符串，可查到能匹配的C++代码是uv_winsock_init函数的这行代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv_fatal_error(WSAGetLastError(), <span class="string">"getsockopt"</span>);</span><br></pre></td></tr></table></figure><p>能够查看uv_winsock_init函数的完整代码，看到有两行一样的代码。编译器把两行代码优化成了一段汇编代码，因此，pdb匹配的时候，不知道匹配的是哪行代码，就显示为0。</p><h2 id="矛盾点：socket的句柄值不对"><a href="#矛盾点：socket的句柄值不对" class="headerlink" title="矛盾点：socket的句柄值不对"></a>矛盾点：socket的句柄值不对</h2><p>通过反汇编uv_winsock_init函数的代码，看到上面的代码，就是getsockopt失败了。</p><ul><li>反汇编代码片段1</li></ul><blockquote><p>lark!uv_winsock_init+0x88 [D:\Project\electron-gn\src\third_party\electron_node\deps\uv\src\win\winsock.c @ 112]:<br>  112 044c2a3c 89c6            mov     esi,eax<br>  112 044c2a3e 8d85f0fbffff    lea     eax,[ebp-410h]<br>  112 044c2a44 8d8df4fbffff    lea     ecx,[ebp-40Ch]<br>  112 044c2a4a c70074020000    mov     dword ptr [eax],274h<br>  113 044c2a50 50              push    eax<br>  113 044c2a51 51              push    ecx<br>  113 044c2a52 6805200000      push    2005h<br>  113 044c2a57 68ffff0000      push    0FFFFh<br>  113 044c2a5c 56              push    esi<br>  113 044c2a5d ff1538b2e905    call    dword ptr [lark!_imp__getsockopt (05e9b238)]<br>  113 044c2a63 83f8ff          cmp     eax,0FFFFFFFFh<br>  113 044c2a66 0f84e9000000    je      lark!uv_winsock_init+0x1a1 (044c2b55)  Branch</p></blockquote><ul><li>反汇编代码片段2</li></ul><blockquote><p>lark!uv_winsock_init+0x107 [D:\Project\electron-gn\src\third_party\electron_node\deps\uv\src\win\winsock.c @ 135]:<br>  135 044c2abb 89c6            mov     esi,eax<br>  135 044c2abd 8d85f0fbffff    lea     eax,[ebp-410h]<br>  135 044c2ac3 8d8df4fbffff    lea     ecx,[ebp-40Ch]<br>  135 044c2ac9 c70074020000    mov     dword ptr [eax],274h<br>  136 044c2acf 50              push    eax<br>  136 044c2ad0 51              push    ecx<br>  136 044c2ad1 6805200000      push    2005h<br>  136 044c2ad6 68ffff0000      push    0FFFFh<br>  136 044c2adb 56              push    esi<br>  136 044c2adc ff1538b2e905    call    dword ptr [lark!_imp__getsockopt (05e9b238)]<br>  136 044c2ae2 83f8ff          cmp     eax,0FFFFFFFFh<br>  136 044c2ae5 746e            je      lark!uv_winsock_init+0x1a1 (044c2b55)  Branch</p></blockquote><p>匹配单行代码时，是能够匹配到精确的代码行，上面的反代码片段分别是winsock.c的112和135行，都是getsockopt的函数调用。通过阅读代码发现，两段代码的处理逻辑部分类似，只是一个是处理ipv4，一个是处理ipv6。下面就以ipv4的处理为分析对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Detect non-IFS LSPs */</span></span><br><span class="line">dummy = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (dummy != INVALID_SOCKET) &#123;</span><br><span class="line">  opt_len = (<span class="keyword">int</span>) <span class="keyword">sizeof</span> protocol_info;</span><br><span class="line">  <span class="keyword">if</span> (getsockopt(dummy,</span><br><span class="line">                 SOL_SOCKET,</span><br><span class="line">                 SO_PROTOCOL_INFOW,</span><br><span class="line">                 (<span class="keyword">char</span>*) &amp;protocol_info,</span><br><span class="line">                 &amp;opt_len) == SOCKET_ERROR)</span><br><span class="line">    uv_fatal_error(WSAGetLastError(), <span class="string">"getsockopt"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!(protocol_info.dwServiceFlags1 &amp; XP1_IFS_HANDLES))</span><br><span class="line">    uv_tcp_non_ifs_lsp_ipv4 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (closesocket(dummy) == SOCKET_ERROR)</span><br><span class="line">    uv_fatal_error(WSAGetLastError(), <span class="string">"closesocket"</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!error_means_no_support(WSAGetLastError())) &#123;</span><br><span class="line">  <span class="comment">/* Any error other than "socket type not supported" is fatal. */</span></span><br><span class="line">  uv_fatal_error(WSAGetLastError(), <span class="string">"socket"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过分析这段代码，如果能运行到uv_fatal_error，说明getsockopt失败。但之前的socket应该是创建成功了。先通过.frame切换到uv_winsock_init函数的调用栈中。</p><blockquote><p>0:000&gt; .frame 01<br>01 0034f734 03416512 lark!uv_winsock_init+0x1a1 [D:\Project\electron-gn\src\third_party\electron_node\deps\uv\src\win\winsock.c @ 0] </p></blockquote><p>通过dv查看局部变量的值。</p><blockquote><p>0:000&gt; dv<br>       wsa_data = struct WSAData<br>  protocol_info = struct _WSAPROTOCOL_INFOW<br>        opt_len = 0n628<br>        errorno = <value unavailable><br>          dummy = 0x277a</value></p></blockquote><p>dummy是socket的句柄，可通过!handle查看返回的句柄是否正常。</p><blockquote><p>0:000&gt; !handle 0x277a<br>Handle 0000277a<br>  Type                 <error retrieving type></error></p></blockquote><p>这时候，出现了一个矛盾点，因为通过查询MSDN得知，socket()返回的值是能是有效的句柄或者是INVALID_SOCKET（-1）。通过查询附近的栈内容，也没有查到一个有效的socket句柄。</p><blockquote><p>0:000&gt; k<br> # ChildEBP RetAddr<br>00 0042f8f0 04602b95 KERNELBASE+0x133e8</p><p>0:000&gt; dd 0042f8f0<br>0042f8f0  0042fd10 04602b95 0000277a 0531269a<br>0042f900  00000274 00020066 00000000 00000000<br>0042f910  00000000 00000008 e70f1aa0 11cfab8b<br>0042f920  8000a38c 92a1485f 000003e9 00000001<br>0042f930  00000000 00000000 00000000 00000000<br>0042f940  00000000 00000000 00000000 00000002<br>0042f950  00000002 00000010 00000010 00000001<br>0042f960  00000006 00000000 00000000 00000000</p></blockquote><p>查询了MSDN，发现dummy的值0x277a（10106）跟WSAGetLastError()的可能返回值相同，此时，开始怀疑pdb匹配有比较大的出入，需要重新分析。</p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;接到用户反馈，基于electron的应用都无法启动，包括VSCode，点击快捷方式，没有任何反应。非electron的其他软
      
    
    </summary>
    
    
      <category term="Electron" scheme="https://bingoli.github.io/tags/Electron/"/>
    
      <category term="LSP" scheme="https://bingoli.github.io/tags/LSP/"/>
    
  </entry>
  
  <entry>
    <title>Windbg使用FAQ</title>
    <link href="https://bingoli.github.io/2020/02/01/windbg_faq/"/>
    <id>https://bingoli.github.io/2020/02/01/windbg_faq/</id>
    <published>2020-02-01T21:54:33.000Z</published>
    <updated>2020-03-09T16:53:10.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="64位和32位转换"><a href="#64位和32位转换" class="headerlink" title="64位和32位转换"></a>64位和32位转换</h3><blockquote><p>.load wow64exts<br>!sw</p></blockquote><h3 id="转储dump"><a href="#转储dump" class="headerlink" title="转储dump"></a>转储dump</h3><p>minidump</p><blockquote><p>.dump /m d:\mydump.dmp</p></blockquote><p>fulldump</p><blockquote><p>.dump /mf d:\mydump.dmp</p></blockquote><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;64位和32位转换&quot;&gt;&lt;a href=&quot;#64位和32位转换&quot; class=&quot;headerlink&quot; title=&quot;64位和32位转换&quot;&gt;&lt;/a&gt;64位和32位转换&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;.load wow64exts&lt;br&gt;!sw&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="windbg" scheme="https://bingoli.github.io/tags/windbg/"/>
    
  </entry>
  
  <entry>
    <title>Chromium的无锁线程模型示例之PostTask</title>
    <link href="https://bingoli.github.io/2020/01/27/chromium_thread_model_post_task/"/>
    <id>https://bingoli.github.io/2020/01/27/chromium_thread_model_post_task/</id>
    <published>2020-01-27T20:11:34.000Z</published>
    <updated>2020-03-09T16:53:10.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>多线程一直是软件开发中最容易出问题的环节，很多的崩溃、卡死问题都与多线程有关。在常用的线程模型中，一般会使用线程锁保证线程数据安全，但是，在实践中，这种模式很容易造成漏加锁、锁粒度太大、死锁等问题。</p><p>要解决这类问题，一种比较好的方式是采用无锁的线程模型，Chromium就是采用了这种线程模型。本文通过Electron基于Chromium线程模型实现的打开文件对话框功能，介绍无锁线程模型的思路。</p><h1 id="无锁线程模型简介"><a href="#无锁线程模型简介" class="headerlink" title="无锁线程模型简介"></a>无锁线程模型简介</h1><h2 id="应用层数据不加锁"><a href="#应用层数据不加锁" class="headerlink" title="应用层数据不加锁"></a>应用层数据不加锁</h2><p>chromium的无锁线程模型，不是指完全的不使用线程锁，因为底层的Task队列是有加锁的，而是指在应用层使用时，不需要添加线程锁。</p><h2 id="不同线程不会同时访问数据"><a href="#不同线程不会同时访问数据" class="headerlink" title="不同线程不会同时访问数据"></a>不同线程不会同时访问数据</h2><p>无锁线程模型，主要是保证在同一时间，不同线程在同一时间不会同时访问相同的数据。下面的例子要用到的方法，主要是对不同线程访问数据的能力进行隔离。对数据访问能力隔离方式主要有</p><ul><li>拷贝，在不同线程传递数据时，对数据进行一份拷贝，让两个线程访问的是不同数据。</li><li>移动，在不同线程传递数据时，使用std::move进行右值转移，让原线程无法访问这个数据。</li></ul><h1 id="无锁线程模型示例"><a href="#无锁线程模型示例" class="headerlink" title="无锁线程模型示例"></a>无锁线程模型示例</h1><p>下面以Electron的dialog.showOpenDialog实现代码为例，说明Chromium的无锁线程模型的使用原理。</p><h2 id="dialog-showOpenDialog的调用"><a href="#dialog-showOpenDialog的调用" class="headerlink" title="dialog.showOpenDialog的调用"></a>dialog.showOpenDialog的调用</h2><p>Electron的接口函数dialog.showOpenDialog是一个异步的JavaScript函数，会返回一个promise。showOpenDialog会弹出一个文件选择对话框，用户选择文件之后，把文件路径通过result.filePaths返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dialog.showOpenDialog(mainWindow, &#123;</span><br><span class="line">  properties: [<span class="string">'openFile'</span>]</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result.canceled)</span><br><span class="line">  <span class="built_in">console</span>.log(result.filePaths)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Chromium线程几个基本概念"><a href="#Chromium线程几个基本概念" class="headerlink" title="Chromium线程几个基本概念"></a>Chromium线程几个基本概念</h2><ul><li>TaskRunner：每一个线程有一个TaskRunner，主要通过PostTask把任务投放到线程的任务队列，通过线程安全的引用技术管理生命周期，可配合scoped_refptr在不同线程使用。</li><li>PostTask：TaskRunner的一个函数，可向该线程的任务队列中发送一个闭包，闭包会在该线程中执行。</li></ul><p>相关代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BASE_EXPORT</span> <span class="title">TaskRunner</span></span></span><br><span class="line"><span class="class">    :</span> <span class="keyword">public</span> RefCountedThreadSafe&lt;TaskRunner, TaskRunnerTraits&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">PostTask</span><span class="params">(<span class="keyword">const</span> Location&amp; from_here, OnceClosure task)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-代码响应JavaScript调用"><a href="#C-代码响应JavaScript调用" class="headerlink" title="C++代码响应JavaScript调用"></a>C++代码响应JavaScript调用</h2><p>在JavaScript调用dialog.showOpenDialog之后，会在UI线程中，调用到C++代码的ShowOpenDialog函数。ShowOpenDialog函数主要是创建一个新的Dialog线程，然后通过PostTask把RunOpenDialogInNewThread函数抛到这个Dialog线程去运行。这个过程中，需要处理所有权的参数有3个，run_state、settings和promise。</p><ul><li>run_state、settings是通过拷贝方式隔离不同线程的访问权。run_state除了保存有Dialog线程的指针外，还有UI线程的TaskRunner，用于后续Dialog线程往UI线程发送回调函数。</li><li>promise是通过std::move进行所有权转移，转移之后，就只有Dialog线程的函数RunOpenDialogInNewThread有权访问，UI线程暂时无权限访问。</li></ul><p>相关代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RunState</span> &#123;</span></span><br><span class="line">  base::Thread* dialog_thread;</span><br><span class="line">  scoped_refptr&lt;base::SingleThreadTaskRunner&gt; ui_task_runner;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CreateDialogThread</span><span class="params">(RunState* run_state)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> thread =</span><br><span class="line">      <span class="built_in">std</span>::make_unique&lt;base::Thread&gt;(ELECTRON_PRODUCT_NAME <span class="string">"FileDialogThread"</span>);</span><br><span class="line">  thread-&gt;init_com_with_mta(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">if</span> (!thread-&gt;Start())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  run_state-&gt;dialog_thread = thread.<span class="built_in">release</span>();</span><br><span class="line">  run_state-&gt;ui_task_runner = base::ThreadTaskRunnerHandle::Get();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowOpenDialog</span><span class="params">(<span class="keyword">const</span> DialogSettings&amp; settings,</span></span></span><br><span class="line"><span class="function"><span class="params">                    gin_helper::Promise&lt;gin_helper::Dictionary&gt; promise)</span> </span>&#123;</span><br><span class="line">  gin_helper::Dictionary dict = gin::Dictionary::CreateEmpty(promise.isolate());</span><br><span class="line">  RunState run_state;</span><br><span class="line">  <span class="keyword">if</span> (!CreateDialogThread(&amp;run_state)) &#123;</span><br><span class="line">    dict.Set(<span class="string">"canceled"</span>, <span class="literal">true</span>);</span><br><span class="line">    dict.Set(<span class="string">"filePaths"</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;base::FilePath&gt;());</span><br><span class="line">    promise.Resolve(dict);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    run_state.dialog_thread-&gt;task_runner()-&gt;PostTask(</span><br><span class="line">        FROM_HERE, base::BindOnce(&amp;RunOpenDialogInNewThread, run_state,</span><br><span class="line">                                  settings, <span class="built_in">std</span>::<span class="built_in">move</span>(promise)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dialog线程执行任务，并把结果返回给UI线程"><a href="#Dialog线程执行任务，并把结果返回给UI线程" class="headerlink" title="Dialog线程执行任务，并把结果返回给UI线程"></a>Dialog线程执行任务，并把结果返回给UI线程</h2><p>RunOpenDialogInNewThread函数会在Dialog线程中运行，它通过ShowOpenDialogSync函数获取到选中的文件路径paths，并通过拷贝的方式，返回结果result和paths。</p><p>这时，promise的所有权再次通过std::move进行了转移，转移之后，只有UI线程的OnDialogOpened函数有权访问。</p><p>相关代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RunOpenDialogInNewThread</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> RunState&amp; run_state,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> DialogSettings&amp; settings,</span></span></span><br><span class="line"><span class="function"><span class="params">    gin_helper::Promise&lt;gin_helper::Dictionary&gt; promise)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;base::FilePath&gt; paths;</span><br><span class="line">  <span class="keyword">bool</span> result = ShowOpenDialogSync(settings, &amp;paths);</span><br><span class="line">  run_state.ui_task_runner-&gt;PostTask(</span><br><span class="line">      FROM_HERE,</span><br><span class="line">      base::BindOnce(&amp;OnDialogOpened, <span class="built_in">std</span>::<span class="built_in">move</span>(promise), !result, paths));</span><br><span class="line">  run_state.ui_task_runner-&gt;DeleteSoon(FROM_HERE, run_state.dialog_thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UI线程处理返回结果"><a href="#UI线程处理返回结果" class="headerlink" title="UI线程处理返回结果"></a>UI线程处理返回结果</h2><p>此时，回到了UI线程，OnDialogOpened函数对promise进行处理后，返回给JavaScript的promise的处理结果，最终会回到JavaScript的promise的then函数。</p><p>相关代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnDialogOpened</span><span class="params">(gin_helper::Promise&lt;gin_helper::Dictionary&gt; promise,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">bool</span> canceled,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;base::FilePath&gt; paths)</span> </span>&#123;</span><br><span class="line">  gin_helper::Dictionary dict = gin::Dictionary::CreateEmpty(promise.isolate());</span><br><span class="line">  dict.Set(<span class="string">"canceled"</span>, canceled);</span><br><span class="line">  dict.Set(<span class="string">"filePaths"</span>, paths);</span><br><span class="line">  promise.Resolve(dict);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><p>promise的可访问权，是跟着showOpenDialog处理顺序进行变化，执行属性如下：</p><ul><li>在UI线程运行函数：ShowOpenDialog</li><li>在Dialog线程运行函数：RunOpenDialogInNewThread</li><li>在UI线程运行函数：OnDialogOpened</li></ul><p>相关流程图如下：</p><p><img src="https://bingoli.github.io/electron_open_file_dialog_sequence_chart.jpg" alt="微信公众号：程序员bingo"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>上面通过Electron的dialog.showOpenDailog，介绍了Chromium的无锁线程模型的一些使用思路。这个例子是通过拷贝和移动语义来保证不同线程无法同时对同一变量进行访问，从而不需要加锁。如果能够正确使用这种线程模型，是可以消除因为数据锁带来的一些线程同步问题。</p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;多线程一直是软件开发中最容易出问题的环节，很多的崩溃、卡死问题都与多线程有关。在常用的线程模型中，一般会使用线程锁保证线程数据安全，但是，在
      
    
    </summary>
    
    
      <category term="chromium" scheme="https://bingoli.github.io/tags/chromium/"/>
    
      <category term="Electron" scheme="https://bingoli.github.io/tags/Electron/"/>
    
      <category term="线程" scheme="https://bingoli.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>VSCode使用FAQ</title>
    <link href="https://bingoli.github.io/2020/01/27/vscode_faq/"/>
    <id>https://bingoli.github.io/2020/01/27/vscode_faq/</id>
    <published>2020-01-27T16:56:12.000Z</published>
    <updated>2020-03-09T16:53:10.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何对选定内容进行排序"><a href="#如何对选定内容进行排序" class="headerlink" title="如何对选定内容进行排序"></a>如何对选定内容进行排序</h3><ul><li>打开命令面板(Ctrl+Shift+P)</li><li>输入sort，在候选列表中选择Sort Lines Ascending</li></ul><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何对选定内容进行排序&quot;&gt;&lt;a href=&quot;#如何对选定内容进行排序&quot; class=&quot;headerlink&quot; title=&quot;如何对选定内容进行排序&quot;&gt;&lt;/a&gt;如何对选定内容进行排序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开命令面板(Ctrl+Shift+P)&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="vscode" scheme="https://bingoli.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>为什么反汇编代码跟C++源码匹配不上？</title>
    <link href="https://bingoli.github.io/2020/01/26/windbg_sample_function_optimization/"/>
    <id>https://bingoli.github.io/2020/01/26/windbg_sample_function_optimization/</id>
    <published>2020-01-26T10:22:30.000Z</published>
    <updated>2020-03-09T16:53:10.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在分析C++代码的崩溃、卡顿等问题时，经常需要用到反汇编代码，但由于编译器的优化处理，经常会出现反汇编代码和C++代码不匹配的情况，这就需要我们仔细核对源码和反汇编代码，才能最终定位问题的原因。本文介绍的例子，是由于两个函数的内容相同，而被编译器优化成了一个函数，因此导致了反汇编代码和C++代码不匹配的问题。</p><h1 id="编译和运行环境"><a href="#编译和运行环境" class="headerlink" title="编译和运行环境"></a>编译和运行环境</h1><p>本文使用的编译器是VS2019，编译配置为Release Win32，并把编译优化选项关闭，工程生成的可执行文件为sample.exe。用windbg把sample.exe运行，会自动中止运行。先要把sample.exe的符号加载上，才能打断点和查询相关类和函数的符号。</p><blockquote><p>0:000&gt; .reload /s /f sample.exe</p></blockquote><h1 id="反汇编代码"><a href="#反汇编代码" class="headerlink" title="反汇编代码"></a>反汇编代码</h1><p>在调试的排查问题时，反汇编了构造函数和析构函数的源码，发现构造函数的反汇编代码和C++源码匹配不上。在反汇编代码中，构造函数竟然调用了Uninit，而实际上是调用的Init。</p><blockquote><p>0:000&gt; uf sample!CA::CA<br>sample!CA::CA [C:\Users\bingo\source\repos\sample\sample.cpp @ 7]:<br>    7 00731000 55              push    ebp<br>    7 00731001 8bec            mov     ebp,esp<br>    7 00731003 51              push    ecx<br>    7 00731004 894dfc          mov     dword ptr [ebp-4],ecx<br>    8 00731007 8b4dfc          mov     ecx,dword ptr [ebp-4]<br>    <strong>8 0073100a e851000000      call    sample!CA::Uninit (00731060)</strong><br>    9 0073100f 8b45fc          mov     eax,dword ptr [ebp-4]<br>    9 00731012 8be5            mov     esp,ebp<br>    9 00731014 5d              pop     ebp<br>    9 00731015 c3              ret</p></blockquote><p>析构函数的反汇编代码是正常的，是调用了Unint函数。</p><blockquote><p>0:000&gt; uf sample!CA::~CA<br>sample!CA::~CA [C:\Users\bingo\source\repos\sample\sample.cpp @ 11]:<br>   11 00731020 55              push    ebp<br>   11 00731021 8bec            mov     ebp,esp<br>   11 00731023 6aff            push    0FFFFFFFFh<br>   11 00731025 68d0257300      push    offset sample!_filter_x86_sse2_floating_point_exception_default+0x7f (007325d0)<br>   11 0073102a 64a100000000    mov     eax,dword ptr fs:[00000000h]<br>   11 00731030 50              push    eax<br>   11 00731031 51              push    ecx<br>   11 00731032 a104507300      mov     eax,dword ptr [sample!__security_cookie (00735004)]<br>   11 00731037 33c5            xor     eax,ebp<br>   11 00731039 50              push    eax<br>   11 0073103a 8d45f4          lea     eax,[ebp-0Ch]<br>   11 0073103d 64a300000000    mov     dword ptr fs:[00000000h],eax<br>   11 00731043 894df0          mov     dword ptr [ebp-10h],ecx<br>   12 00731046 8b4df0          mov     ecx,dword ptr [ebp-10h]<br>   <strong>12 00731049 e812000000      call    sample!CA::Uninit (00731060)</strong><br>   13 0073104e 8b4df4          mov     ecx,dword ptr [ebp-0Ch]<br>   13 00731051 64890d00000000  mov     dword ptr fs:[0],ecx<br>   13 00731058 59              pop     ecx<br>   13 00731059 8be5            mov     esp,ebp<br>   13 0073105b 5d              pop     ebp<br>   13 0073105c c3              ret</p></blockquote><p>这到底是怎么回事呢？是不是Init函数被编译器遗漏了？是不是编译错误？进一步看下CA类的所有函数。</p><blockquote><p>0:000&gt; x sample!CA::*<br><strong>00731060          sample!CA::Uninit (void)</strong><br>00731150          sample!CA::`scalar deleting destructor’ (void)<br>00731080          sample!CA::Fun (void)<br>00731000          sample!CA::CA (void)<br>00731020          sample!CA::~CA (void)<br><strong>00731060          sample!CA::Init (void)</strong></p></blockquote><p>原来CA::Init并没有被编译器遗漏了，只是和CA::Uninit的函数地址是一样的，也就是说，调用Init和Unit实际上运行得是同一段代码。</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>现在来看一下源码，源码比较简单，就是在构造函数和析构函数中，分别调用了一个初始化和反初始化的函数，而两个函数的具体实现相同。因此，编译器为了节省空间，把两个函数合并成了一个函数，而Windbg在反汇编的时候，就会出现一个地址对应多个函数，而在显示时，只显示一个函数名称，也就会出现某些匹配错误的现象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CA</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  CA() &#123;</span><br><span class="line">    Init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ~CA() &#123;</span><br><span class="line">    Uninit();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Fun();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Uninit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Fun();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"CA::Fun"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  CA* pa = <span class="keyword">new</span> CA();</span><br><span class="line">  <span class="keyword">delete</span> pa;</span><br><span class="line">  pa = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>反汇编代码并不能完整匹配C++代码， 还需要我们结合上下文进行判断他们之间的对应关系。了解了编译器的一些优化手段，会让我们能够更快的排查问题。</p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;在分析C++代码的崩溃、卡顿等问题时，经常需要用到反汇编代码，但由于编译器的优化处理，经常会出现反汇编代码和C++代码不匹配的情况，这就需要
      
    
    </summary>
    
    
      <category term="Windbg" scheme="https://bingoli.github.io/tags/Windbg/"/>
    
      <category term="C++" scheme="https://bingoli.github.io/tags/C/"/>
    
      <category term="汇编" scheme="https://bingoli.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>C++的构造函数可以调用其他虚函数吗？</title>
    <link href="https://bingoli.github.io/2020/01/09/windbg_constructor_call_virtual_function/"/>
    <id>https://bingoli.github.io/2020/01/09/windbg_constructor_call_virtual_function/</id>
    <published>2020-01-09T22:34:39.000Z</published>
    <updated>2020-03-09T16:53:10.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在C++面试中，构造函数和析构函数应该是经常会聊到的一类话题，比如</p><ul><li>子类和父类中，构造函数和析构函数的调用顺序是什么？</li><li>构造函数和析构函数，可以调用其他的虚函数吗？</li></ul><p>对于这些问题，只要了解C++的构造和析构原理，以及调用虚函数的原理，就能很轻松的回答上来。很多C++教科书中，都会讲解构造函数和析构函数的原理，但对于一些实现细节，比如虚函数表指针的初始化，讲解的并不是特别详细。而且这些C++的原理，没有在C++代码中体现，但反汇编代码里是有这些细节的，因此，通过研究反汇编代码，是可以更容易的理解这些的原理。本文将通过一个例子，讲解使用Windbg通过反汇编，分析C++的构造函数和析构函数对虚函数的调用实现。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>先来看下源码，下面的代码实现了一个父类CBase和一个子类CDerived，在父类和子类中构造函数和析构函数中，都调用了虚函数Init和Uninit。为了在反汇编代码中更容易的区分父类和子类，在CBase类中，构建了一个成员变量base_value，并赋初始值为0x1234;在CDerived类中，构建了一个成员变量derived_value，并赋初始值为0x5678。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBase</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  CBase() &#123;</span><br><span class="line">    Init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">virtual</span> ~CBase() &#123;</span><br><span class="line">    Uninit();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Fun();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Uninit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"CBase::Uninit"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"CBase::Fun"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> base_value = <span class="number">0x1234</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CDerived</span> :</span> <span class="keyword">public</span> CBase &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  CDerived() &#123;</span><br><span class="line">    Init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">virtual</span> ~CDerived() &#123;</span><br><span class="line">    Uninit();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"CDerived::Init"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Uninit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"CDerived::Uninit"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"CDerived::Fun"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> derived_value = <span class="number">0x5678</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  CDerived* derived = <span class="keyword">new</span> CDerived();</span><br><span class="line">  <span class="keyword">delete</span> derived;</span><br><span class="line">  derived = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="编译和运行环境"><a href="#编译和运行环境" class="headerlink" title="编译和运行环境"></a>编译和运行环境</h1><p>本文使用的编译器是VS2019，编译配置为Release Win32，并把编译优化选项关闭，工程生成的可执行文件为sample.exe。用windbg把sample.exe运行，会自动中止运行。先要把sample.exe的符号加载上，才能打断点和查询相关类和函数的符号。</p><blockquote><p>0:000&gt; .reload /s /f sample.exe</p></blockquote><h1 id="构造函数、析构函数的调用顺序"><a href="#构造函数、析构函数的调用顺序" class="headerlink" title="构造函数、析构函数的调用顺序"></a>构造函数、析构函数的调用顺序</h1><p>要了解构造函数和析构函数的调用顺序，只需要在相关函数中打印一些信息，就很容易获得到相关顺序。相关信息打印如下：</p><blockquote><p>CBase::CBase()<br>CDerived::CDerived()<br>CDerived::CDerived()<br>CBase::CBase()</p></blockquote><p>结论如下：</p><ul><li>构造时，先调用父类构造函数，再调用子类构造函数</li><li>析构时，先调用子类析构函数，再调用父类析构函数</li></ul><p>为了简化反汇编代码，后续代码中注释了这些打印信息。</p><h1 id="构造函数的实现细节"><a href="#构造函数的实现细节" class="headerlink" title="构造函数的实现细节"></a>构造函数的实现细节</h1><p>为了了解构造函数的实现细节，需要对构造函数的代码进行反汇编，先把子类的代码进行展开。CDerived的构造函数中的主要流程如下</p><ul><li>调用父类CBase的构造函数</li><li>把CDerived的虚函数表地址赋值给对象的虚函数表指针</li><li>初始化CDerived的成员变量</li><li>调用函数Init</li></ul><blockquote><p>0:000&gt; uf sample!CDerived::CDerived<br>sample!CDerived::CDerived :<br>   36 00eb1160 55              push    ebp<br>   36 00eb1161 8bec            mov     ebp,esp<br>   36 00eb1163 6aff            push    0FFFFFFFFh<br>   36 00eb1165 681828eb00      push    offset sample!_filter_x86_sse2_floating_point_exception_default+0xaa (00eb2818)<br>   36 00eb116a 64a100000000    mov     eax,dword ptr fs:[00000000h]<br>   36 00eb1170 50              push    eax<br>   36 00eb1171 51              push    ecx<br>   36 00eb1172 a10450eb00      mov     eax,dword ptr [sample!__security_cookie (00eb5004)]<br>   36 00eb1177 33c5            xor     eax,ebp<br>   36 00eb1179 50              push    eax<br>   36 00eb117a 8d45f4          lea     eax,[ebp-0Ch]<br>   36 00eb117d 64a300000000    mov     dword ptr fs:[00000000h],eax<br>   36 00eb1183 894df0          mov     dword ptr [ebp-10h],ecx<br>   36 00eb1186 8b4df0          mov     ecx,dword ptr [ebp-10h]<br>   // 调用父类的构造函数<br>   <strong>36 00eb1189 e872feffff      call    sample!CBase::CBase (00eb1000)</strong><br>   36 00eb118e c745fc00000000  mov     dword ptr [ebp-4],0<br>   // 得到this指针<br>   36 00eb1195 8b45f0          mov     eax,dword ptr [ebp-10h]<br>   // 把CDerived的虚函数表指针赋值给对象的虚函数表指针<br>   <strong>36 00eb1198 c7002032eb00    mov     dword ptr [eax],offset sample!CDerived::`vftable’ (00eb3220)</strong><br>   56 00eb119e 8b4df0          mov     ecx,dword ptr [ebp-10h]<br>   // 初始化CDerived的成员变量derived_value<br>   <strong>56 00eb11a1 c7410878560000  mov     dword ptr [ecx+8],5678h</strong><br>   37 00eb11a8 8b4df0          mov     ecx,dword ptr [ebp-10h]<br>   // 调用函数Init<br>   <strong>37 00eb11ab e870000000      call    sample!CDerived::Init (00eb1220)</strong><br>   38 00eb11b0 c745fcffffffff  mov     dword ptr [ebp-4],0FFFFFFFFh<br>   38 00eb11b7 8b45f0          mov     eax,dword ptr [ebp-10h]<br>   38 00eb11ba 8b4df4          mov     ecx,dword ptr [ebp-0Ch]<br>   38 00eb11bd 64890d00000000  mov     dword ptr fs:[0],ecx<br>   38 00eb11c4 59              pop     ecx<br>   38 00eb11c5 8be5            mov     esp,ebp<br>   38 00eb11c7 5d              pop     ebp<br>   38 00eb11c8 c3              ret</p></blockquote><p>CBase的构造函数的主要流程如下：</p><ul><li>把CBase的虚函数表地址赋值给对象的虚函数表指针</li><li>初始化CBase的成员变量</li><li>调用函数Init</li></ul><blockquote><p>0:000&gt; uf sample!CBase::CBase<br>sample!CBase::CBase :<br>    7 00eb1000 55              push    ebp<br>    7 00eb1001 8bec            mov     ebp,esp<br>    7 00eb1003 51              push    ecx<br>    7 00eb1004 894dfc          mov     dword ptr [ebp-4],ecx<br>    7 00eb1007 8b45fc          mov     eax,dword ptr [ebp-4]<br>    // 把CBase的虚函数表地址赋值给对象的虚函数表指针<br>    <strong>7 00eb100a c7003432eb00    mov     dword ptr [eax],offset sample!CBase::`vftable’ (00eb3234)</strong><br>    // 得到this指针的值<br>   31 00eb1010 8b4dfc          mov     ecx,dword ptr [ebp-4]<br>    // 初始化CBase的成员变量base_value<br>   <strong>31 00eb1013 c7410434120000  mov     dword ptr [ecx+4],1234h</strong><br>    8 00eb101a 8b4dfc          mov     ecx,dword ptr [ebp-4]<br>    // 调用函数Init<br>    <strong>8 00eb101d e85e000000      call    sample!CBase::Init (00eb1080)</strong><br>    9 00eb1022 8b45fc          mov     eax,dword ptr [ebp-4]<br>    9 00eb1025 8be5            mov     esp,ebp<br>    9 00eb1027 5d              pop     ebp<br>    9 00eb1028 c3              ret</p></blockquote><h1 id="析构函数的实现细节"><a href="#析构函数的实现细节" class="headerlink" title="析构函数的实现细节"></a>析构函数的实现细节</h1><p>CDerived析构函数的主要流程如下</p><ul><li>把CDerived的虚函数表地址赋值给对象的虚函数表指针</li><li>调用函数Uninit</li><li>调用父类CBase的析构函数</li></ul><blockquote><p>0:000&gt; uf sample!CDerived::~CDerived<br>sample!CDerived::~CDerived :<br>   40 00eb11d0 55              push    ebp<br>   40 00eb11d1 8bec            mov     ebp,esp<br>   40 00eb11d3 6aff            push    0FFFFFFFFh<br>   40 00eb11d5 68f027eb00      push    offset sample!_filter_x86_sse2_floating_point_exception_default+0x82 (00eb27f0)<br>   40 00eb11da 64a100000000    mov     eax,dword ptr fs:[00000000h]<br>   40 00eb11e0 50              push    eax<br>   40 00eb11e1 51              push    ecx<br>   40 00eb11e2 a10450eb00      mov     eax,dword ptr [sample!__security_cookie (00eb5004)]<br>   40 00eb11e7 33c5            xor     eax,ebp<br>   40 00eb11e9 50              push    eax<br>   40 00eb11ea 8d45f4          lea     eax,[ebp-0Ch]<br>   40 00eb11ed 64a300000000    mov     dword ptr fs:[00000000h],eax<br>   40 00eb11f3 894df0          mov     dword ptr [ebp-10h],ecx<br>   40 00eb11f6 8b45f0          mov     eax,dword ptr [ebp-10h]<br>   // 把CDerived的虚函数表地址赋值给对象的虚函数表指针<br>   <strong>40 00eb11f9 c7002032eb00    mov     dword ptr [eax],offset sample!CDerived::`vftable’ (00eb3220)</strong><br>   41 00eb11ff 8b4df0          mov     ecx,dword ptr [ebp-10h]<br>   // 调用函数Uninit<br>   <strong>41 00eb1202 e849000000      call    sample!CDerived::Uninit (00eb1250)</strong><br>   42 00eb1207 8b4df0          mov     ecx,dword ptr [ebp-10h]<br>   // 调用父类CBase的析构函数<br>   <strong>42 00eb120a e821feffff      call    sample!CBase::~CBase (00eb1030)</strong><br>   42 00eb120f 8b4df4          mov     ecx,dword ptr [ebp-0Ch]<br>   42 00eb1212 64890d00000000  mov     dword ptr fs:[0],ecx<br>   42 00eb1219 59              pop     ecx<br>   42 00eb121a 8be5            mov     esp,ebp<br>   42 00eb121c 5d              pop     ebp<br>   42 00eb121d c3              ret</p></blockquote><p>CBase的析构函数的主要流程如下：</p><ul><li>把CBase的虚函数表地址赋值给对象的虚函数表指针</li><li>调用函数Uninit</li></ul><blockquote><p>0:000&gt; uf sample!CBase::~CBase<br>sample!CBase::~CBase :<br>   11 00eb1030 55              push    ebp<br>   11 00eb1031 8bec            mov     ebp,esp<br>   11 00eb1033 6aff            push    0FFFFFFFFh<br>   11 00eb1035 68f027eb00      push    offset sample!_filter_x86_sse2_floating_point_exception_default+0x82 (00eb27f0)<br>   11 00eb103a 64a100000000    mov     eax,dword ptr fs:[00000000h]<br>   11 00eb1040 50              push    eax<br>   11 00eb1041 51              push    ecx<br>   11 00eb1042 a10450eb00      mov     eax,dword ptr [sample!__security_cookie (00eb5004)]<br>   11 00eb1047 33c5            xor     eax,ebp<br>   11 00eb1049 50              push    eax<br>   11 00eb104a 8d45f4          lea     eax,[ebp-0Ch]<br>   11 00eb104d 64a300000000    mov     dword ptr fs:[00000000h],eax<br>   11 00eb1053 894df0          mov     dword ptr [ebp-10h],ecx<br>   11 00eb1056 8b45f0          mov     eax,dword ptr [ebp-10h]<br>   // 把CBase的虚函数表地址赋值给对象的虚函数表指针<br>   <strong>11 00eb1059 c7003432eb00    mov     dword ptr [eax],offset sample!CBase::`vftable’ (00eb3234)</strong><br>   12 00eb105f 8b4df0          mov     ecx,dword ptr [ebp-10h]<br>   // 调用函数Uninit<br>   <strong>12 00eb1062 e849000000      call    sample!CBase::Uninit (00eb10b0)</strong><br>   13 00eb1067 8b4df4          mov     ecx,dword ptr [ebp-0Ch]<br>   13 00eb106a 64890d00000000  mov     dword ptr fs:[0],ecx<br>   13 00eb1071 59              pop     ecx<br>   13 00eb1072 8be5            mov     esp,ebp<br>   13 00eb1074 5d              pop     ebp<br>   13 00eb1075 c3              ret</p></blockquote><h1 id="构造函数调用虚函数"><a href="#构造函数调用虚函数" class="headerlink" title="构造函数调用虚函数"></a>构造函数调用虚函数</h1><p>通过上面的反汇编代码看出，在构造函数或析构函数，调用其他虚函数时，是通过call命令调用函数地址，跟普通函数调用方式一样。</p><p>CBase的构造函数调用Init函数</p><blockquote><p>8 00eb101d e85e000000      call    sample!CBase::Init (00eb1080)</p></blockquote><p>CDerived的构造函数调用Init函数</p><blockquote><p>37 00eb11ab e870000000      call    sample!CDerived::Init (00eb1220)</p></blockquote><p>CDerived的析构函数调用Uninit函数</p><blockquote><p>41 00eb1202 e849000000      call    sample!CDerived::Uninit (00eb1250)</p></blockquote><p>CBase的析构函数调用Uninit函数</p><blockquote><p>12 00eb1062 e849000000      call    sample!CBase::Uninit (00eb10b0)</p></blockquote><p>以CBase的构造函数为例，调用虚函数Init函数，跟指定调用当前类的函数的实现是一样的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CBase::CBase() &#123;</span><br><span class="line">  CBase::Init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是编译器对构造函数和析构函数做了特殊处理，但如果通过间接方式调用其他虚函数，就跟普通函数调用虚函数的方式是一样的。</p><h1 id="如何调用虚函数"><a href="#如何调用虚函数" class="headerlink" title="如何调用虚函数"></a>如何调用虚函数</h1><p>在上面的代码中，CBase::Init函数调用了另一个虚函数Fun。而调用虚函数，主要是要找到虚函数表指针，以及虚函数在虚函数表中的偏移，然后计算出虚函数的地址。主要步骤如下：</p><ul><li>获取到this指针的地址。</li><li>通过this指针得到虚函数表地址，一般this指针就是指向虚函数表地址。</li><li>通过函数在虚函数表内的偏移量，加上虚函数表地址，计算出函数的地址。</li><li>通过call命令调用函数</li></ul><p>CBase::Init的反汇编代码如下，主要步骤已经注释</p><blockquote><p>0:000&gt; uf sample!CBase::Init<br>sample!CBase::Init :<br>   27 00eb1110 55              push    ebp<br>   27 00eb1111 8bec            mov     ebp,esp<br>   27 00eb1113 51              push    ecx<br>   27 00eb1114 894dfc          mov     dword ptr [ebp-4],ecx<br>   // 得到this指针<br>   28 00eb1117 8b45fc          mov     eax,dword ptr [ebp-4]<br>   // 得到虚函数表指针<br>   <strong>28 00eb111a 8b10            mov     edx,dword ptr [eax]</strong><br>   // 传递this指针，供函数Fun使用<br>   28 00eb111c 8b4dfc          mov     ecx,dword ptr [ebp-4]<br>   // 计算出虚函数Fun的地址<br>   <strong>28 00eb111f 8b4204          mov     eax,dword ptr [edx+4]</strong><br>   // 调用虚函数<br>   <strong>28 00eb1122 ffd0            call    eax</strong><br>   29 00eb1124 8be5            mov     esp,ebp<br>   29 00eb1126 5d              pop     ebp<br>   29 00eb1127 c3              ret</p></blockquote><p>通过反汇编代码分析可知，是调用的子类还是父类的虚函数，关键还是要看虚函数表指针指向的是谁的虚函数表。由于构造函数和析构函数，都会把虚函数表指针设置为当前类的虚函数表地址，因此，在构造函数和析构函数中调用的虚函数，都是调用得当前类的函数。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>构造函数和析构函数，调用其他虚函数时，由于虚函数表指针指向得是当前类的虚函数表，因此，调用得是当前类的函数。而这种实现，容易造成混淆和误解，所以，建议在构造函数和析构函数中应该避免直接或者间接调用其他虚函数。</p><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;在C++面试中，构造函数和析构函数应该是经常会聊到的一类话题，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子类和父类中，构造函数和析构函数的调用顺序是什
      
    
    </summary>
    
    
      <category term="Windbg" scheme="https://bingoli.github.io/tags/Windbg/"/>
    
      <category term="C++" scheme="https://bingoli.github.io/tags/C/"/>
    
      <category term="虚函数" scheme="https://bingoli.github.io/tags/%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用Windbg分析C++的句柄泄露问题</title>
    <link href="https://bingoli.github.io/2020/01/09/windbg-handle-leak/"/>
    <id>https://bingoli.github.io/2020/01/09/windbg-handle-leak/</id>
    <published>2020-01-09T22:34:39.000Z</published>
    <updated>2020-03-09T16:53:10.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>句柄泄露是因为创建句柄之后，没有及时销毁句柄。因此，排查句柄泄露的原因，重点需要找到是哪些句柄发生了泄露，以及创建这些句柄的代码。本文将通过一个例子来演示使用Windbg分析句柄泄露的方法。</p><h1 id="检测句柄泄露"><a href="#检测句柄泄露" class="headerlink" title="检测句柄泄露"></a>检测句柄泄露</h1><p>检测进程使用句柄数量的工具有很多，如果看到句柄的数量在持续增加，那就是发生了句柄泄露。下面将对进程id为20298(0x51c0)的进程进行分析。</p><h3 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h3><p>句柄列默认是隐藏的，需要通过“选择列”配置把句柄列显示。</p><p><img src="https://bingoli.github.io/windbg-handle-leak-task-manager.png" alt="微信公众号：程序员bingo"></p><h3 id="Process-Explorer"><a href="#Process-Explorer" class="headerlink" title="Process Explorer"></a>Process Explorer</h3><p>Process Explorer查看进程详细信息，在Performance标签的内容中，包括了进程的句柄数量统计。</p><p><img src="https://bingoli.github.io/windbg-handle-leak-process-explorer.png" alt="微信公众号：程序员bingo"></p><h3 id="Windbg"><a href="#Windbg" class="headerlink" title="Windbg"></a>Windbg</h3><p>需要先通过主菜单绑定进程，然后通过!handle命令查看当前进程的已使用的句柄数量</p><blockquote><p>0:001&gt; <strong>!handle</strong><br>135 Handles<br>Type               Count<br>None               6<br>Event              8<br>File               7<br>Directory          3<br>Key                4<br>Thread             92<br>IoCompletion       3<br>TpWorkerFactory    3<br>ALPC Port          1<br>WaitCompletionPacket    8</p></blockquote><p>通过上面数据可以看出，当前已打开的句柄的主要为Thread。而通过~*查询发现，当前进程只有2个线程，打开这么多线程句柄是异常的。</p><blockquote><p>0:001&gt; <strong>~*</strong><br>   0  Id: 51c0.85a4 Suspend: 1 Teb: 00626000 Unfrozen<br>      Start: handle_leak!ILT+825(_mainCRTStartup) (00a1133e)<br>      Priority: 0  Priority class: 32  Affinity: fff<br>.  1  Id: 51c0.3ad8 Suspend: 1 Teb: 0063b000 Unfrozen<br>      Start: ntdll!DbgUiRemoteBreakin (7775abe0)<br>      Priority: 0  Priority class: 32  Affinity: fff</p></blockquote><h1 id="使用Windbg分析Thread句柄泄露的原因"><a href="#使用Windbg分析Thread句柄泄露的原因" class="headerlink" title="使用Windbg分析Thread句柄泄露的原因"></a>使用Windbg分析Thread句柄泄露的原因</h1><p>!htrace命令可以跟踪创建和销毁句柄的调用栈，通过调用栈可以判断句柄泄露的原因。首先，通过!htrace -enable打开功能，并且获取当前所有的句柄的快照。然后通过g命令继续运行程序。</p><blockquote><p>0:001&gt; <strong>!htrace -enable</strong><br>Handle tracing enabled.<br>Handle tracing information snapshot successfully taken.</p></blockquote><blockquote><p>0:001&gt; <strong>g</strong></p></blockquote><p>运行一段时间后，通过ATL+DEL快捷键暂停程序运行。通过!htrace -diff命令可查看创建快照之后的所有句柄操作。</p><blockquote><p>0:001&gt; <strong>!htrace -diff</strong><br>Handle tracing information snapshot successfully taken.<br>0x17 new stack traces since the previous snapshot.<br>Ignoring handles that were already closed…<br>Outstanding handles opened since the previous snapshot:<br>-————————————-<br>************************<br>-————————————-<br>Handle = 0x00000244 - OPEN<br>Thread ID = 0x000085a4, Process ID = 0x000051c0</p><p>0x5e1c8322: +0x5e1c8322<br>0x5e1c7c83: +0x5e1c7c83<br>0x5ddd2d15: +0x5ddd2d15<br>0x8fcbe5d4: +0x8fcbe5d4<br>0x8f615ae4: +0x8f615ae4<br>0x8f617123: +0x8f617123<br>0x776a1783: +0x776a1783<br>0x776a1199: +0x776a1199<br>0x8f61c77a: +0x8f61c77a<br>0x8f61c637: +0x8f61c637<br>0x8fcf3fb3: +0x8fcf3fb3<br>0x8fce1db5: +0x8fce1db5<br>0x8fc91853: +0x8fc91853<br>0x8fc917fe: +0x8fc917fe<br>0x7772300c: ntdll!NtOpenThread+0x0000000c<br>0x7570f208: KERNELBASE!OpenThread+0x00000048<br>-————————————-<br>Displayed 0x17 stack traces for outstanding handles opened since the previous snapshot.</p></blockquote><p>从上面的数据显示，在这段时间内，有23(0x17)个句柄发生了泄露。也可以通过!handle验证一下现有句柄的差值，Thread句柄数量已经从92增长到了115个，差值为23个。</p><blockquote><p>0:001&gt; <strong>!handle</strong><br>158 Handles<br>Type               Count<br>None               6<br>Event              8<br>File               7<br>Directory          3<br>Key                4<br>Thread             115<br>IoCompletion       3<br>TpWorkerFactory    3<br>ALPC Port          1<br>WaitCompletionPacket    8</p></blockquote><p>!handle命令也可查看单个句柄的详情，里面有创建句柄的线程信息，在分析多线程程序时会用得着。</p><blockquote><p>0:001&gt; <strong>!handle 0x00000244 0xf</strong><br>Handle 244<br>  Type             Thread<br>  Attributes       0<br>  GrantedAccess    0x1fffff:<br>         Delete,ReadControl,WriteDac,WriteOwner,Synch<br>         Terminate,Suspend,Alert,GetContext,SetContext,SetInfo,QueryInfo,SetToken,Impersonate,DirectImpersonate<br>  HandleCount      131<br>  PointerCount     130760<br>  Name             &lt;none&gt;<br>  Object Specific Information<br>    Thread Id   51c0.85a4<br>    Priority    10<br>    Base Priority 0<br>    Start Address a1133e handle_leak!ILT+825(_mainCRTStartup)</p></blockquote><p>现在的问题是，通过栈信息，只能看到KERNELBASE!OpenThread，看不到更上层的调用栈。由于本次句柄泄露是可以重现的，因此，可通过打断点的方式来查找句柄泄露的原因。在ntdll!NtOpenThread+0x0000000c中打上断点之后，继续运行程序，等待断点命中。断点命中之后，可通过k命令查看详细的调用栈。</p><blockquote><p>0:001&gt; <strong>bp ntdll!NtOpenThread+0x0000000c</strong></p></blockquote><blockquote><p>0:001&gt; <strong>g</strong></p></blockquote><blockquote><p>Breakpoint 0 hit<br>eax=00000000 ebx=00623000 ecx=93e70000 edx=00000000 esi=008ff5c0 edi=008ff698<br>eip=7772300c esp=008ff574 ebp=008ff5ac iopl=0         nv up ei pl nz na pe nc<br>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206<br>ntdll!NtOpenThread+0xc:<br>7772300c c21000          ret     10h</p></blockquote><blockquote><p>0:000&gt; <strong>k</strong><br> # ChildEBP RetAddr<br>00 008ff570 7570f208 ntdll!NtOpenThread+0xc<br>WARNING: Stack unwind information not available. Following frames may be wrong.<br>01 008ff5ac 00a11767 KERNELBASE!OpenThread+0x48<br>02 008ff698 00a118a6 handle_leak!OpenThreadFun+0x47 [D:\github\samples\windows\handle_leak\main.cpp @ 5]<br>03 008ff76c 00a12013 handle_leak!main+0x36 [D:\github\samples\windows\handle_leak\main.cpp @ 14]<br>04 008ff78c 00a11e67 handle_leak!invoke_main+0x33<br>05 008ff7e8 00a11cfd handle_leak!__scrt_common_main_seh+0x157<br>06 008ff7f0 00a12098 handle_leak!__scrt_common_main+0xd<br>07 008ff7f8 77176359 handle_leak!mainCRTStartup+0x8<br>08 008ff808 77717b74 KERNEL32!BaseThreadInitThunk+0x19<br>09 008ff864 77717b44 ntdll!__RtlUserThreadStart+0x2f<br>0a 008ff874 00000000 ntdll!_RtlUserThreadStart+0x1b</p></blockquote><p>有了详细栈信息，就知道发生句柄泄露的上层调用函数为handle_leak!OpenThreadFun，下面就是通过代码来分析为什么会发生句柄泄露了。</p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>本文内存泄露的一个简化例子，看下代码，很容易就知道句柄泄露的原因，就是因为手误注释掉了CloseHandle，打开线程句柄之后未关闭句柄。如果是大型工程的话，可能需要更详细大的分析。本文使用的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OpenThreadFun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HANDLE handle = ::OpenThread(THREAD_ALL_ACCESS, TRUE, ::GetCurrentThreadId());</span><br><span class="line"></span><br><span class="line">    ::Sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// ::CloseHandle(handle);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        OpenThreadFun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;句柄泄露是因为创建句柄之后，没有及时销毁句柄。因此，排查句柄泄露的原因，重点需要找到是哪些句柄发生了泄露，以及创建这些句柄的代码。本文将通过
      
    
    </summary>
    
    
      <category term="Windbg" scheme="https://bingoli.github.io/tags/Windbg/"/>
    
      <category term="C++" scheme="https://bingoli.github.io/tags/C/"/>
    
      <category term="句柄泄露" scheme="https://bingoli.github.io/tags/%E5%8F%A5%E6%9F%84%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>使用WPT分析第三方软件导致的软件卡顿问题</title>
    <link href="https://bingoli.github.io/2020/01/03/wpt-hang-by-uiautomation/"/>
    <id>https://bingoli.github.io/2020/01/03/wpt-hang-by-uiautomation/</id>
    <published>2020-01-03T21:11:45.000Z</published>
    <updated>2020-03-09T16:53:10.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在Windows系统中，存在一些拥有超级权限的软件（如驱动、服务等），而这些软件一旦没有做好，应用软件也会受到它们的影响，从而造成各种问题。这类问题，可以统一划分为兼容性问题。在处理用户反馈的时候，如果发现可能存在兼容性问题，可以通过卸载一些软件来定位具体是和哪个软件不兼容。如果要定位造成不兼容的原因，则需要使用一些专业的软件来处理，比如WPT(Windows Performance Toolkit)。WPT的功能非常强大，本文通过一个实际案例，介绍WPT定位第三方软件造成的卡顿原因的能力。</p><h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><ul><li>WPR（Windows Performance Recorder），用于采集用户的Trace，会生成.etl文件。</li><li>WPA（Windows Performance Analyzer），用于分析采集到的.etl文件。</li><li>WPT（Windows Performace Toolkit），采集和分析用户Trace的工具集，包括WPR和WPA。</li><li>im.exe，指当前使用的聊天软件的主进程。</li><li>srv.exe，指造成im.exe卡顿的第三方进程。</li></ul><h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>在使用聊天软件的时候，出现了断断续续的卡顿，主要表现为：打字的时候，能明显的感觉到顿了一下，打字上屏的速度比较慢，删除已输入的字时，也是比较慢；稍微打字快一点，就能感觉字是一蹦一蹦的输入。</p><p>由于这种现象是持续性，且只有个别电脑出现，很大概率跟第三方软件有关。要想知道究竟是谁在捣乱，就得上WPT这种专业的抓现场工具。</p><h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><p>通过WPR，已经抓到卡顿过程的Trace信息，只需要使用WPA来分析了。WPA打开etl文件之后，需要先把Symbols加载。操作路径为勾选主菜单Trace下面的子菜单Load Symbols。</p><h2 id="分析UI线程的调用栈"><a href="#分析UI线程的调用栈" class="headerlink" title="分析UI线程的调用栈"></a>分析UI线程的调用栈</h2><p>由于是聊天软件出现了卡顿，这种情况一般是UI线程被短暂的阻塞了，因此，可通过WPR的火焰图来重点观察im.exe的UI线程的情况。通过下图也可以看出，UI线程大部分的调用都与UIAutomationCore.dll有关。这显然跟预期是不符合的，需要看看UIAutomationCore.dll到底是干什么的。</p><p><img src="https://bingoli.github.io/wpt-hang-by-uiautomation-flame.png" alt="im.exe的UI线程调用栈"></p><h2 id="UIAutomation在UI线程调用SendMessageTimeout造成卡顿"><a href="#UIAutomation在UI线程调用SendMessageTimeout造成卡顿" class="headerlink" title="UIAutomation在UI线程调用SendMessageTimeout造成卡顿"></a>UIAutomation在UI线程调用SendMessageTimeout造成卡顿</h2><p>使用WPA分析Trace，是可以看到系统函数的各种调用。通过排查发现，UIAutomation调用了SendMessageTimeout，这是一个同步调用，如果对方没有及时回复，就必须等到超时才会返回。更庆幸的是，它调用得不是SendMessage，否则有可能一直卡死在这里。</p><p><img src="https://bingoli.github.io/wpt-hang-by-uiautomation-stack.png" alt="SendMessageTimeout调用栈"></p><h2 id="查查UIAutomation的底细"><a href="#查查UIAutomation的底细" class="headerlink" title="查查UIAutomation的底细"></a>查查UIAutomation的底细</h2><p>通过查询资料了解到，UIAutomationCore是Windows平台下UI自动化测试的核心模块，调用方和提供方都需要使用。因此，只要查到也在调用UIAutomationCore.dll的进程，就能查到导致聊天软件卡顿的元凶。</p><p><img src="https://bingoli.github.io/wpt-hang-by-uiautomation-core.dll.png" alt="UIAutomation架构"></p><h2 id="通过模块查找进程"><a href="#通过模块查找进程" class="headerlink" title="通过模块查找进程"></a>通过模块查找进程</h2><p>WPA分析问题时，列表里有很多选项可以选择，也可以对选项进行排序，并且，WPA会对放在前面的列进行优先聚合。这次，我们要做的时，过滤出来与UIAutomationCore.dll有关的所有进程。通过下面的数据可以看出，只有两个进程与UIAutomationCore.dll有关，其中一个是im.exe（正在使用的聊天软件的主进程），另一个是srv.exe(某壁纸软件的进程)。于是，捣乱嫌疑进程找到了。</p><p><img src="https://bingoli.github.io/wpt-hang-by-uiautomation-module.png" alt="通过模块查找进程"></p><h2 id="分析srv-exe的调用栈"><a href="#分析srv-exe的调用栈" class="headerlink" title="分析srv.exe的调用栈"></a>分析srv.exe的调用栈</h2><p>找到了可疑进程，那就对可疑进程进行调用栈展开，看看它都在干什么。从UIAutomationCore.dll!UiaNodeTraverser::Traverse能看出来，它是在遍历自动化测试节点，跟im.exe的UI线程调用栈有很大的关联性。</p><p><img src="https://bingoli.github.io/wpt-hang-by-uiautomation-target-exe.png" alt="srv.exe的调用栈"></p><h2 id="进一步的证据"><a href="#进一步的证据" class="headerlink" title="进一步的证据"></a>进一步的证据</h2><p>两个软件之间，到底有多大的关联性，我们还可以看一看它们的CPU调用占比。把这两个进程的的CPU调用放到一起比较，虽然占比不一样，但是节奏非常一致，简直就跟军训时走正步一样整齐。</p><p><img src="https://bingoli.github.io/wpt-hang-by-uiautomation-compare.png" alt="CPU调用"></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>啥也别说了，都知道是你了，那就查查这个进程是谁家的。根据进程的启动路径，知道了是某壁纸的进程。于是，把该壁纸卸载了，聊天软件的卡顿问题就消除了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>自动化测试接口也叫无障碍接口，可通过读屏软件给视觉障碍的人提供帮助。但是，也有人用这个接口来做其他一些不太好的事，更关键的是，还没有用好，给用户使用其他软件造成了困扰。</li><li>WPT通过抓Trace，可用来分析整个系统里的软件的各种行为。当然，这也可能会涉及到个人隐私的泄露，也要合理的使用。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>Windows Performance Toolkit : <a href="https://docs.microsoft.com/en-us/windows-hardware/test/wpt/" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows-hardware/test/wpt/</a></li></ul><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;在Windows系统中，存在一些拥有超级权限的软件（如驱动、服务等），而这些软件一旦没有做好，应用软件也会受到它们的影响，从而造成各种问题。
      
    
    </summary>
    
    
      <category term="WPT" scheme="https://bingoli.github.io/tags/WPT/"/>
    
      <category term="性能优化" scheme="https://bingoli.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="UIAutomation" scheme="https://bingoli.github.io/tags/UIAutomation/"/>
    
  </entry>
  
  <entry>
    <title>Electron打开文件对话框卡死问题分析</title>
    <link href="https://bingoli.github.io/2020/01/01/electron_open_file_dialog_hang/"/>
    <id>https://bingoli.github.io/2020/01/01/electron_open_file_dialog_hang/</id>
    <published>2020-01-01T08:51:23.000Z</published>
    <updated>2020-03-09T16:53:10.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ul><li>分析卡死问题时，可结合WPT和Windbg一起分析。</li><li>Electron弹出的打开文件对话框存在必现的卡死场景，原因是弹窗线程COM反初始化卡死，而主线程在同步等待弹窗线程销毁。</li><li>Electron的部分代码还没及时跟上Chromium的改动，分析Electron的问题时，可多跟最新版Chrome进行对比。</li></ul><h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>测试同学在基于Electron Windows的App上测试发送图片时，出现了整个界面卡死。</p><h1 id="现场信息分析"><a href="#现场信息分析" class="headerlink" title="现场信息分析"></a>现场信息分析</h1><h3 id="现场信息捕获"><a href="#现场信息捕获" class="headerlink" title="现场信息捕获"></a>现场信息捕获</h3><p>在测试同学测试时，出现了卡死，保留有现场。分别用以下工具抓取相关信息。</p><ul><li>Windows Performance Toolkit，抓取了系统的Trace信息。</li><li>Process Explorer，抓取了主进程的Dump。</li></ul><h3 id="使用WPT分析Trace"><a href="#使用WPT分析Trace" class="headerlink" title="使用WPT分析Trace"></a>使用WPT分析Trace</h3><h3 id="UI-Delays分析"><a href="#UI-Delays分析" class="headerlink" title="UI Delays分析"></a>UI Delays分析</h3><p>通过WPA的UI Delays可以捕获到UI卡死相关信息。</p><ul><li>MsgCheck Delay为消息队列被阻塞</li><li>Input Delay为输入队列被阻塞</li></ul><p>从下面的数据可看出，主线程和文件弹窗线程都被卡死了，且都被卡主了295s，因此，这两个线程之前的卡死可能存在关联性。</p><p><img src="https://bingoli.github.io/electron_open_file_dialog_hang_ui_delays.png" alt="ui_delays"></p><h3 id="CPU占用分析"><a href="#CPU占用分析" class="headerlink" title="CPU占用分析"></a>CPU占用分析</h3><p>在Trace的CPU占用统计中，没有捕获到这两个线程的相关信息，原因是这两个线程已经被挂起了，CPU消耗很少。只能通过其他方法对问题进一步分析。</p><p><img src="https://bingoli.github.io/electron_open_file_dialog_hang_wpt_threads.png" alt="WPT捕获的线程"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>根据已有线索进行推论：有2个线程被卡死了，可能存在关联。</p><ul><li>主线程，id 6028, 0x178c</li><li>ElectronFileDialogThread线程，id 10076，0x275c</li></ul><h2 id="使用Windbg分析Dump"><a href="#使用Windbg分析Dump" class="headerlink" title="使用Windbg分析Dump"></a>使用Windbg分析Dump</h2><h3 id="Dump详情"><a href="#Dump详情" class="headerlink" title="Dump详情"></a>Dump详情</h3><p>相关操作</p><ul><li>打开Dump，加载符号</li><li>查看卡死线程调用栈信息</li></ul><blockquote><p>||0:000&gt; .symfix C:\Symbols</p></blockquote><blockquote><p>||0:000&gt; .reload</p></blockquote><blockquote><p>||0:000&gt; !analyze -v<br>EXCEPTION_RECORD:  (.exr -1)ExceptionAddress: 00000000<br>   ExceptionCode: 80000003 (Break instruction exception)<br>  ExceptionFlags: 00000000<br>NumberParameters: 0<br>FAULTING_THREAD:  0000178c<br>PROCESS_NAME:  Electron.exe</p></blockquote><blockquote><p>||0:000&gt; k<br> # ChildEBP RetAddr<br>00 095bf480 7614e2c9 ntdll!NtWaitForSingleObject+0xc<br>WARNING: Stack unwind information not available. Following frames may be wrong.<br>01 095bf4f4 7614e222 KERNELBASE!WaitForSingleObjectEx+0x99<br>02 095bf508 01bcead8 KERNELBASE!WaitForSingleObject+0x12<br>03 095bf558 01bd2cbc Electron!base::PlatformThread::Join+0x78<br>04 095bf570 01be559b Electron!base::Thread::~Thread+0x2c<br>05 095bf57c 00348551 Electron!base::Thread::~Thread+0xb<br>06 095bf588 006bfe4c Electron!base::DeleteHelper&lt;net::SerialWorker&gt;DoDelete+0x11<br>07 095bf594 01b6783b Electron!base::internal::Invoker&lt;base::internal::BindStatev&lt;oid (<em>)(void </em>),unsigned char *&gt;,void ()&gt;::RunOnce+0xc<br>08 095bf5d8 01b87903 Electron!base::debug::TaskAnnotator::RunTask+0xab<br>09 095bf640 01b87b0d Electron!base::MessageLoopImpl::RunTask+0xc3<br>0a 095bf660 01b87d5a Electron!base::MessageLoopImpl::DeferOrRunPendingTask+0x4d<br>0b 095bf728 01b88b38 Electron!base::MessageLoopImpl::DoWork+0xca<br>0c 095bf760 01b88541 Electron!base::MessagePumpForUI::DoRunLoop+0x78<br>0d 095bf780 01b8775f Electron!base::MessagePumpWin::Run+0x41<br>0e 095bf790 01ba1e03 Electron!base::MessageLoopImpl::Run+0x1f</p></blockquote><p>根据上面的信息可得出，当前卡死的线程id为线程0x178c，即主线程。调用栈信息表明，主线程之所以卡死了，是因为在等待另一个线程结束。要知道是在等待哪个线程，就需要拿到该线程的进一步信息。切换到对应的调用函数，查看相关变量的值即可获取到线程信息，即Thread变量的值。</p><blockquote><p>||0:0:000&gt; .frame 05<br>05 095bf57c 00348551 Electron!base::Thread::~Thread+0xb</p></blockquote><blockquote><p>||0:0:000&gt; dx this<br>this                 : 0x1a67dea0 [Type: base::Thread *]<br>    [+0x004] com_status_      : STA (1) [Type: base::Thread::ComStatus<br>    [+0x008] joinable_        : true [Type: bool]<br>    [+0x009] stopping_        : true [Type: bool]<br>    [+0x00a] running_         : false [Type: bool]<br>    [+0x00c] running_lock_    [Type: base::Lock]<br>    [+0x010] thread_          [Type: base::PlatformThreadHandle]<br>    [+0x014] thread_lock_     [Type: base::Lock]<br>    [+0x018] id_              : 0x275c [Type: unsigned long]<br>    [+0x01c] id_event_        [Type: base::WaitableEvent]<br>    [+0x024] message_loop_    : 0x111ad860 [Type: base::MessageLoop *]<br>    [+0x028] run_loop_        : 0x2675f894 [Type: base::RunLoop *]<br>    [+0x02c] using_external_message_loop_ : false [Type: bool]<br>    [+0x030] timer_slack_     : TIMER_SLACK_NONE (0) [Type: base::TimerSlack]<br>    [+0x034] name_            : “ElectronFileDialogThread” [Type: std::basic_stringc&lt;har,std::char_traitsc&lt;har&gt;,std::allocator&lt;char&gt; &gt;]<br>    [+0x04c] start_event_     [Type: base::WaitableEvent]<br>    [+0x054] owning_sequence_checker_ [Type: base::SequenceChecker]</p></blockquote><p>以上信息说明，主线程在等待的线程名为ElectronFileDialogThread，id为0x275c。这些信息，跟WPT获取的信息正好互相印证。有了线程id，就可以切换到该线程去查看调用栈信息。</p><blockquote><p>||0:0:000&gt; ~~[0x275c]s<br>eax=00000000 ebx=00000004 ecx=00000000 edx=00000000 esi=00000000 edi=0965a000<br>eip=7781708c esp=2675e8f4 ebp=2675e968 iopl=0         nv up ei pl nz na po nc<br>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202<br>win32u!NtUserMsgWaitForMultipleObjectsEx+0xc:</p></blockquote><blockquote><p>||0:0:072&gt; k<br>#  ChildEBP RetAddr<br>00 2675e8f0 7526dfd9 win32u!NtUserMsgWaitForMultipleObjectsEx+0xc<br>01 2675e968 7526df0d user32!RealMsgWaitForMultipleObjectsEx+0x79<br>02 2675e98c 76d388e6 user32!MsgWaitForMultipleObjectsEx+0x4d<br>03 2675ea0c 76d38735 combase!CCliModalLoop::BlockFn+0x166<br>04 2675ea54 76d3ac8c combase!ModalLoop+0xbe<br>05 2675ea6c 76d32d90 combase!ClassicSTAThreadDispatchCrossApartmentCall+0x4c<br>06 (Inline) ——– combase!CSyncClientCall::SwitchAptAndDispatchCall+0x3f5<br>07 2675eba0 76d39f6a combase!CSyncClientCall::SendReceive2+0x4d0<br>08 (Inline) ——– combase!SyncClientCallRetryContext::SendReceiveWithRetry+0x29<br>09 (Inline) ——– combase!CSyncClientCall::SendReceiveInRetryContext+0x29<br>0a 2675ec6c 76d32446 combase!ClassicSTAThreadSendReceive+0x1ea<br>0b 2675ee4c 76d5eb84 combase!CSyncClientCall::SendReceive+0x296<br>0c (Inline) ——– combase!CClientChannel::SendReceive+0x75<br>0d 2675ee74 75505fe5 combase!NdrExtpProxySendReceive+0xc4<br>0e 2675f364 76d8de30 rpcrt4!NdrClientCall2+0x5f5<br>0f 2675f384 76d85dcf combase!ObjectStublessClient+0x70<br>10 2675f394 76d303c6 combase!ObjectStubless+0xf<br>11 (Inline) ——– combase!RemoteReleaseRifRefHelper+0x123<br>12 (Inline) ——– combase!RemoteReleaseRifRef+0x1de<br>13 2675f4d0 76d21fcd combase!CStdMarshal::DisconnectCliIPIDs+0x826<br>14 2675f538 76d7136d combase!CStdMarshal::DisconnectWorker_ReleasesLock+0x5ad<br>15 2675f550 76d71322 combase!CStdMarshal::DisconnectSwitch_ReleasesLock+0x1d<br>16 2675f578 76d71203 combase!CStdMarshal::DisconnectAndReleaseWorker_ReleasesLock+0x34<br>17 2675f594 76cef085 combase!CStdMarshal::DisconnectAndRelease+0x35<br>18 2675f750 76ceeecb combase!COIDTable::ThreadCleanup+0xd3<br>19 (Inline) ——– combase!FinishShutdown::__l2::&lt;lambda_52cd3ea394b0aaaaa4b6e0872859635a&gt;::operator()+0x5<br>1a 2675f788 76cee8ff combase!ObjectMethodExceptionHandlingAction&lt;&lt;lambda_52cd3ea394b0aaaaa4b6e0872859635a&gt; &gt;+0x15<br>1b 2675f7a8 76cee072 combase!FinishShutdown+0x44<br>1c 2675f7d0 76d410fe combase!ApartmentUninitialize+0x79<br>1d 2675f7f0 76d41629 combase!wCoUninitialize+0xf8<br>1e 2675f86c 01c1dfdc combase!CoUninitialize+0xf9<br>1f 2675f87c 01be4601 Electron!base::win::ScopedCOMInitializer::~ScopedCOMInitializer+0x1c<br>20 2675f8bc 01be5cc7 Electron!base::Thread::ThreadMain+0x171<br>21 2675f8e0 76f96359 Electron!base::`anonymous namespace’::ThreadFunc+0xf7<br>22 2675f8f0 778f7b74 kernel32!BaseThreadInitThunk+0x19<br>23 2675f94c 778f7b44 ntdll!__RtlUserThreadStart+0x2f<br>24 2675f95c 00000000 ntdll!_RtlUserThreadStart+0x1b</p></blockquote><p>FileDialog线程卡死，是在CoUninitialize时在等待某些COM接口的断开连接操作。</p><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><ul><li>主线程被卡死了，是因为在等待ElectronFileDialogThread线程结束。</li><li>ElectronFileDialogThread线程被卡死了，是因为在COM反初始化CoUninitialize时卡死了。</li></ul><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="Electron相关代码"><a href="#Electron相关代码" class="headerlink" title="Electron相关代码"></a>Electron相关代码</h2><p>根据现有线索，其中一个线程名为ElectronFileDialogThread。使用ElectronFileDialogThread在代码中搜索，未搜索到相关信息。通过FileDialogThread，搜索到了相关代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CreateDialogThread</span><span class="params">(RunState* run_state)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> thread =</span><br><span class="line">      <span class="built_in">std</span>::make_unique&lt;base::Thread&gt;(ATOM_PRODUCT_NAME <span class="string">"FileDialogThread"</span>);</span><br><span class="line">  thread-&gt;init_com_with_mta(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">if</span> (!thread-&gt;Start())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  run_state-&gt;dialog_thread = thread.<span class="built_in">release</span>();</span><br><span class="line">  run_state-&gt;ui_task_runner = base::ThreadTaskRunnerHandle::Get();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据代码往前追溯发现，主线程接收到文件选择弹窗时，会先创建一个新线程，然后把弹窗任务抛到新线程去执行。主线程的相关代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowOpenDialog</span><span class="params">(<span class="keyword">const</span> DialogSettings&amp; settings,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">const</span> OpenDialogCallback&amp; callback)</span> </span>&#123;</span><br><span class="line">  RunState run_state;</span><br><span class="line">  <span class="keyword">if</span> (!CreateDialogThread(&amp;run_state)) &#123;</span><br><span class="line">    callback.Run(<span class="literal">false</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;base::FilePath&gt;());</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run_state.dialog_thread-&gt;task_runner()-&gt;PostTask(</span><br><span class="line">      FROM_HERE,</span><br><span class="line">      base::Bind(&amp;RunOpenDialogInNewThread, run_state, settings, callback));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弹窗的具体实现由FileDailog线程完成，相关步骤有</p><ul><li>弹窗，等待用户交互，用户操作后返回。</li><li>把用户选择的路径通过回调返回给主线程。</li><li>通知主线程可以把当前线程删除。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RunOpenDialogInNewThread</span><span class="params">(<span class="keyword">const</span> RunState&amp; run_state,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">const</span> DialogSettings&amp; settings,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">const</span> OpenDialogCallback&amp; callback)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;base::FilePath&gt; paths;</span><br><span class="line">  <span class="keyword">bool</span> result = ShowOpenDialog(settings, &amp;paths);</span><br><span class="line">  run_state.ui_task_runner-&gt;PostTask(FROM_HERE,</span><br><span class="line">                                     base::Bind(callback, result, paths));</span><br><span class="line">  run_state.ui_task_runner-&gt;DeleteSoon(FROM_HERE, run_state.dialog_thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一步调用DeleteSoon的作用，就是通知主线程在callback调用结束之后，删除FileDialog线程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="title">bool</span> <span class="title">DeleteSoon</span>(<span class="title">const</span> <span class="title">Location</span>&amp; <span class="title">from_here</span>, <span class="title">const</span> <span class="title">T</span>* <span class="title">object</span>) &#123;</span></span><br><span class="line">    <span class="keyword">return</span> DeleteOrReleaseSoonInternal(from_here, &amp;DeleteHelper&lt;T&gt;::DoDelete,</span><br><span class="line">                                       object);</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">DeleteHelper</span> &#123;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoDelete</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> T*&gt;(object);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="FileDialog线程的COM相关代码"><a href="#FileDialog线程的COM相关代码" class="headerlink" title="FileDialog线程的COM相关代码"></a>FileDialog线程的COM相关代码</h2><p>FileDialog线程的卡死跟COM有关，因此，需要分析下与COM有关的代码。其中，FileDialog线程采用的COM线程模型为STA。因此，线程启动和结束时，分别会调用ScopedCOMInitializer封装的COM初始化和反初始化CoUninitalize。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_com_with_mta</span><span class="params">(<span class="keyword">bool</span> use_mta)</span> </span>&#123;</span><br><span class="line">  DCHECK(!delegate_);</span><br><span class="line">  com_status_ = use_mta ? MTA : STA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;win::ScopedCOMInitializer&gt; com_initializer;</span><br><span class="line"><span class="keyword">if</span> (com_status_ != NONE) &#123;</span><br><span class="line">  com_initializer.reset(</span><br><span class="line">      (com_status_ == STA)</span><br><span class="line">          ? <span class="keyword">new</span> win::ScopedCOMInitializer()</span><br><span class="line">          : <span class="keyword">new</span> win::ScopedCOMInitializer(win::ScopedCOMInitializer::kMTA));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h1><p>这里面有2个问题需要解决</p><ul><li>FileDialog线程的销毁卡死问题</li><li>主线程不应该同步等待其他线程结束</li></ul><h2 id="FileDialog线程COM反初始化卡死问题处理"><a href="#FileDialog线程COM反初始化卡死问题处理" class="headerlink" title="FileDialog线程COM反初始化卡死问题处理"></a>FileDialog线程COM反初始化卡死问题处理</h2><h3 id="代码分析与查看文档相结合"><a href="#代码分析与查看文档相结合" class="headerlink" title="代码分析与查看文档相结合"></a>代码分析与查看文档相结合</h3><p>由于已经知道跟COM有关，主要从以下两个方面入手：</p><ul><li>排查FileDialog线程中与COM有关的代码，是否存在误用，如资源未释放的问题。</li><li>通过MSDN查询与COM有关的文档。</li></ul><p>该问题是测试同学发现的问题，有一定复现概率，通过之前录得视频发现，测试同学进行了拖动操作，会跟OLE相关。查询MSDN了解到，在执行文件的拖放操作之前，必须要调用Ole初始化OleInitialize，否则可能会有问题。</p><blockquote><p>Applications that use the following functionality must call OleInitialize before calling any other function in the COM library:</p><ul><li>Clipboard</li><li>Drag and Drop</li><li>Object linking and embedding (OLE)</li><li>In-place activation</li></ul></blockquote><p>从代码中可以看出，FileDialog线程是没有进行OLE初始化的，而MSDN说明拖动必然依赖OLE初始化，因此，这是一个矛盾点。于是，把相关操作进行试验发现，如果在打开文件弹窗内进行拖动操作，是可以稳定复现这个卡顿的。</p><h3 id="使用OLE初始化替换COM初始化"><a href="#使用OLE初始化替换COM初始化" class="headerlink" title="使用OLE初始化替换COM初始化"></a>使用OLE初始化替换COM初始化</h3><p>要解决这个问题，只需要在FileDailog线程中，用OLE替代COM的初始化和反初始化。<br>通过前面的代码可以看出，Thread的变量com_status_==NONE时，是不会进行COM初始化。因此，修复方案如下：</p><ul><li>删除CreateDialogThread函数的thread-&gt;init_com_with_mta(false)操作。</li><li>在线程的初始化添加OLE的初始化。</li></ul><p>为了对原有的代码浸入较小，本方案对base::Thread类进行了继承。对已有代码，只有2行代码的改动，其他都是新增代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileDialogThead</span> :</span> <span class="keyword">public</span> base::Thread &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">FileDialogThead</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name)</span> : <span class="title">base::Thread</span><span class="params">(name)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    OleInitialize(<span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">CleanUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    OleUninitialize();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CreateDialogThread</span><span class="params">(RunState* run_state)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> thread =</span><br><span class="line">      <span class="built_in">std</span>::make_unique&lt;FileDialogThead&gt;(ATOM_PRODUCT_NAME <span class="string">"FileDialogThread"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!thread-&gt;Start())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// thread-&gt;init_com_with_mta(false);</span></span><br><span class="line">  run_state-&gt;dialog_thread = thread.<span class="built_in">release</span>();</span><br><span class="line">  run_state-&gt;ui_task_runner = base::ThreadTaskRunnerHandle::Get();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过实验发现，这种修复方式，把这个必现的bug变成了一个偶现的bug。这就说明，COM反初始化还有其他的坑，暂时还没有找到原因。本次修复策略，只是缓解了问题，没有彻底解决问题。</p><h2 id="去除主线程的同步等待"><a href="#去除主线程的同步等待" class="headerlink" title="去除主线程的同步等待"></a>去除主线程的同步等待</h2><p>由于找到了必现步骤，经过测试发现，Electron最新版和Chrome 66版本都能稳定复现，但Chrome 79内核版本修复了该问题。因此，只需要参考Chrome的修复方案即可。通过查看代码发现，Chrome主要有以下改动：</p><ul><li>增加了线程池，FileDialog线程不会实时销毁。</li><li>FileDailog线程已经移出了主进程，跟主进程无关。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">scoped_refptr&lt;base::SingleThreadTaskRunner&gt; <span class="title">CreateDialogTaskRunner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> CreateCOMSTATaskRunner(</span><br><span class="line">    &#123;base::ThreadPool(), base::TaskPriority::USER_BLOCKING,</span><br><span class="line">     base::TaskShutdownBehavior::CONTINUE_ON_SHUTDOWN, base::MayBlock()&#125;,</span><br><span class="line">    base::SingleThreadTaskRunnerThreadMode::DEDICATED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>Electron的部分代码是从较早版本的Chromium拷贝过来，没有及时跟上Chromium的步伐。Electron同步Chromium的最新代码，应该是可以为Electron开源社区做的一个事。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://social.msdn.microsoft.com/Forums/en-US/633d889d-7d4d-4f11-8422-7213cd8c228b/in-wpa-what-is-delay-typemsgcheck-and-where-can-i-get-more-information-about-it?forum=windbg" target="_blank" rel="noopener">MsgCheck说明</a></li><li><a href="https://cs.chromium.org/chromium/src/ui/shell_dialogs/base_shell_dialog_win.cc?q=base_shell&amp;sq=package:chromium&amp;g=0&amp;l=5" target="_blank" rel="noopener">Chromium源码</a></li></ul><h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;分析卡死问题时，可结合WPT和Windbg一起分析。&lt;/li&gt;
&lt;li&gt;Electron弹出的打开文件对话框存在必现的卡死场景，
      
    
    </summary>
    
    
      <category term="Chromium" scheme="https://bingoli.github.io/tags/Chromium/"/>
    
      <category term="Electron" scheme="https://bingoli.github.io/tags/Electron/"/>
    
      <category term="卡死" scheme="https://bingoli.github.io/tags/%E5%8D%A1%E6%AD%BB/"/>
    
      <category term="WPT" scheme="https://bingoli.github.io/tags/WPT/"/>
    
      <category term="Windbg" scheme="https://bingoli.github.io/tags/Windbg/"/>
    
  </entry>
  
  <entry>
    <title>编译Chromium的问题处理</title>
    <link href="https://bingoli.github.io/2019/11/18/chromium-build-trouble-shooting/"/>
    <id>https://bingoli.github.io/2019/11/18/chromium-build-trouble-shooting/</id>
    <published>2019-11-18T22:35:56.000Z</published>
    <updated>2020-03-09T16:53:10.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Chromium编译时，会遇到各种各样的问题，本文用例记录在实践过程中碰到的问题，以便后面碰到类似的问题，能够更快速解决。</p><h2 id="编译问题"><a href="#编译问题" class="headerlink" title="编译问题"></a>编译问题</h2><h3 id="windows下的python组件"><a href="#windows下的python组件" class="headerlink" title="windows下的python组件"></a>windows下的python组件</h3><p>错误提示：</p><blockquote><p>Traceback (most recent call last):<br>  File “../../build/toolchain/win/tool_wrapper.py”, line 51, in &lt;module&gt;<br>    import win32file    # pylint: disable=import-error<br>ImportError: No module named </p></blockquote><p>解决方法：安装win32file模块。</p><blockquote><p>python -m pip install </p></blockquote><h3 id="win10-sdk安装失败"><a href="#win10-sdk安装失败" class="headerlink" title="win10 sdk安装失败"></a>win10 sdk安装失败</h3><p>错误提示：</p><blockquote><p>C:/Python27/python.exe ../../build/win/copy_cdb_to_output.py cdb x64<br>Traceback (most recent call last):<br>  File “../../build/win/copy_cdb_to_output.py”, line 121, in &lt;module&gt;<br>    sys.exit(main())<br>  File “../../build/win/copy_cdb_to_output.py”, line 117, in main<br>    return _CopyCDBToOutput(sys.argv[1], sys.argv[2])<br>  File “../../build/win/copy_cdb_to_output.py”, line 96, in _CopyCDBToOutput<br>    _CopyImpl(‘cdb.exe’, output_dir, src_dir)<br>  File “../../build/win/copy_cdb_to_output.py”, line 46, in _CopyImpl<br>    shutil.copy(source, target)<br>  File “C:\Python27\lib\shutil.py”, line 119, in copy<br>    copyfile(src, dst)<br>  File “C:\Python27\lib\shutil.py”, line 82, in copyfile<br>    with open(src, ‘rb’) as fsrc:<br>IOError: [Errno 2] No such file or directory: ‘C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\cdb.exe’      [184/2536] CC obj/third_party/boringssl/boringssl/bcm.obj<br>ninja: build stopped: subcommand failed.</p></blockquote><p>问题原因：未安装win10sdk，或者未安装x64的sdk。<br>解决方法：重新安装win10 sdk，下载地址：<br><a href="https://developer.microsoft.com/zh-cn/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">https://developer.microsoft.com/zh-cn/windows/downloads/windows-10-sdk</a><br>如果发现SDK安装不了，需要把原来的SDK先卸载了。</p><h3 id="gn的问题"><a href="#gn的问题" class="headerlink" title="gn的问题"></a>gn的问题</h3><p>错误提示：</p><blockquote><p>gn.py: Could not find checkout in any parent of the current path.<br>This must be run inside a checkout.</p></blockquote><p>问题原因：gn需要去查找buildtools的路径，首先会查找环境变量CHROMIUM_BUILDTOOLS_PATH的值，然后查找.gclient所在目录，并查找该目录下的src/buildtools，如果.gclient不存在，就会出现上面的错误。在把chromium的代码拷贝到github的时候，有时会不注意这个细节。</p><p>有2种解决方法</p><ul><li>设置环境变量CHROMIUM_BUILDTOOLS_PATH的值未src目录下buildtools的路径。</li><li>在src的上一级目录，保留.gclient和.gclient_entries。</li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Chromium编译时，会遇到各种各样的问题，本文用例记录在实践过程中碰到的问题，以便后面碰到类似的问题，能够更快速解决。&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="Chromium" scheme="https://bingoli.github.io/tags/Chromium/"/>
    
      <category term="编译" scheme="https://bingoli.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="gn" scheme="https://bingoli.github.io/tags/gn/"/>
    
      <category term="ninja" scheme="https://bingoli.github.io/tags/ninja/"/>
    
  </entry>
  
  <entry>
    <title>使用C++宏嵌套实现窄字符转换为宽字符</title>
    <link href="https://bingoli.github.io/2019/04/04/macro-char-to-wchar/"/>
    <id>https://bingoli.github.io/2019/04/04/macro-char-to-wchar/</id>
    <published>2019-04-04T22:10:23.000Z</published>
    <updated>2020-03-09T16:53:10.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们经常用宏定义减少字符串的冗余信息，从而让国际化或多品牌的需求变更能够更快速的实现。由于软件中需要同时用到窄字符和宽字符，因此，很容易产生一些冗余信息。例如，下面的代码用不同的宏定义了窄字符和宽字符。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相关定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCT_NAME <span class="meta-string">"Chrome"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCT_NAME_W <span class="meta-string">L"Chrome"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际使用</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> product_name = PRODUCT_NAME;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">wstring</span> product_name_w = PRODUCT_NAME_W;</span><br></pre></td></tr></table></figure></p><p>如果能通过宏实现窄字符转换为宽字符，就可以减少这部分冗余信息。期望的宏应该是这样定义的：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCT_NAME <span class="meta-string">"Chrome"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCT_NAME_W TO_UNICODE(PRODUCT_NAME)</span></span><br></pre></td></tr></table></figure></p><p>接下来的任务就是实现宏TO_UNICODE。</p><h2 id="宏参数的编译错误"><a href="#宏参数的编译错误" class="headerlink" title="宏参数的编译错误"></a>宏参数的编译错误</h2><p>在宏定义中，#和##很常用。其中，#是把宏参数转换为字符串；##是连接符，把宏参数和其他数据直接连接起来。宽字符实际上就是窄字符前面多了一个L，因此，宏TO_UNICODE应该使用##把L和窄字符连接起来。定义如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_UNICODE(x) L##x</span></span><br></pre></td></tr></table></figure></p><p>经过测试，发现使用TO_UNICODE直接转换字符串是没有问题的。如下面的代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果正确，宏PRODUCT_NAME_W展开后是L"Chrome"</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCT_NAME_W TO_UNICODE(<span class="meta-string">"Chrome"</span>)</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">wstring</span> product_name = PRODUCT_NAME_W;</span><br></pre></td></tr></table></figure></p><p>但是，如果宏的参数也是一个宏，但编译就会出错。编译出错的代码如下所示。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译错误，宏PRODUCT_NAME_W展开后是LPRODUCT_NAME</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCT_NAME_W TO_UNICODE(PRODUCT_NAME)</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">wstring</span> product_name = PRODUCT_NAME_W;</span><br></pre></td></tr></table></figure></p><p>编译的错误提示是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error C2065: &apos;LPRODUCT_NAME&apos;: undeclared identifier</span><br></pre></td></tr></table></figure></p><p>从错误提示中可以看出，PRODUCT_NAME并没有被展开。这里是因为##的特殊性，此时，如果x是宏，也不会展开参数x的内容。</p><h2 id="宏嵌套的实现"><a href="#宏嵌套的实现" class="headerlink" title="宏嵌套的实现"></a>宏嵌套的实现</h2><p>为了解决宏没有展开的问题，需要用到宏嵌套，即要让宏PRODUCT_NAME在使用##之前就展开。实现起来也很简单，就是再加一层宏转换。实现代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _TO_UNICODE(y) L##y</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_UNICODE(x) _TO_UNICODE(x)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCT_NAME <span class="meta-string">"Chrome"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRODUCT_NAME_W TO_UNICODE(PRODUCT_NAME)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> product_name = PRODUCT_NAME;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">wstring</span> product_name_w = PRODUCT_NAME_W;</span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>宽窄字符使用不同的宏定义，在实践中是很常见的一个问题。字符串冗余在平时只是一个小问题，如果数量多了，在需要修改的时候，就会是一个大问题。宏嵌套是个小技巧，却能让我们的代码更规范。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;我们经常用宏定义减少字符串的冗余信息，从而让国际化或多品牌的需求变更能够更快速的实现。由于软件中需要同时用到窄字符和宽字符，因此，很容易产生
      
    
    </summary>
    
    
      <category term="C++" scheme="https://bingoli.github.io/tags/C/"/>
    
      <category term="宏" scheme="https://bingoli.github.io/tags/%E5%AE%8F/"/>
    
      <category term="宽字符" scheme="https://bingoli.github.io/tags/%E5%AE%BD%E5%AD%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用Windbg分析C++的多重继承原理</title>
    <link href="https://bingoli.github.io/2019/03/27/windbg-multi-inherit/"/>
    <id>https://bingoli.github.io/2019/03/27/windbg-multi-inherit/</id>
    <published>2019-03-27T06:35:56.000Z</published>
    <updated>2020-03-09T16:53:10.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>windbg是windows平台下C++开发调试的工具，常用于分析软件崩溃，也是学习C++开发的利器。windbg功能很强大，通过它的命令，我们能看到软件底层的实现原理。本系列文章就是借助windbg工具，对C++的实现原理进行深入分析。本文使用windbg分析C++的多重继承的实现原理，主要涉及的内容是：</p><ol><li>多重继承的内存分布</li><li>多重继承的类型转换</li></ol><h2 id="通过源码分析多重继承的空间占用"><a href="#通过源码分析多重继承的空间占用" class="headerlink" title="通过源码分析多重继承的空间占用"></a>通过源码分析多重继承的空间占用</h2><p>先来看看源码，定义了3个类，CC继承自CA和CB。<br>说明：为了实现方便，所有源码会采用了C++11的语法，编译环境为VS2017，默认编译选项为Win32。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CA</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">FunA</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CB</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">FunB</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC</span> :</span> <span class="keyword">public</span> CA, <span class="keyword">public</span> CB &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">FunC</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 打印出各个类占用空间大小</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof CA : "</span> &lt;&lt; <span class="keyword">sizeof</span>(CA) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof CB : "</span> &lt;&lt; <span class="keyword">sizeof</span>(CB) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof CC : "</span> &lt;&lt; <span class="keyword">sizeof</span>(CC) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 安全的向上类型转换</span></span><br><span class="line">    CC* pc = <span class="keyword">new</span> CC();</span><br><span class="line">    CA* pa = pc;</span><br><span class="line">    CB* pb = pc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不安全的向下类型转换</span></span><br><span class="line">    CC* pc21 = (CC*)pa;</span><br><span class="line">    CC* pc22 = (CC*)pb;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误的类型转换</span></span><br><span class="line">    CA* pa31 = (CA*)pb;</span><br><span class="line">    CB* pb31 = (CB*)pa;</span><br><span class="line">    CB* pb32 = <span class="keyword">reinterpret_cast</span>&lt;CB*&gt;(pc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pc;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h3><p>设置断点的过程如下：</p><ol><li>通过x命令找到main函数的地址。</li><li>在main函数的地址上设置断点，使用g命令继续运行，程序会在main函数入口处挂起，并在左侧窗口打开代码。</li><li>鼠标点击代码delete pc;所在行，按下F9设置断点，然后g命令继续运行，程序会在代码delete pc;所在行挂起。<br>后面的操作会在这个断点下进行。<br>相关的操作的命令如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; x sample!main*</span><br><span class="line">00911600          sample!main (void)</span><br><span class="line">0:000&gt; bp 00911600</span><br><span class="line">0:000&gt; g</span><br></pre></td></tr></table></figure></li></ol><h3 id="占用内存分析"><a href="#占用内存分析" class="headerlink" title="占用内存分析"></a>占用内存分析</h3><p>先通过打印出来的日志，看下各个类占用的内存大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sizeof CA : 8</span><br><span class="line">sizeof CB : 8</span><br><span class="line">sizeof CC : 20</span><br></pre></td></tr></table></figure></p><p>其中，CC的大小是CA+CB再加上一个int的大小，说明CC是包含了CA和CB的虚函数表指针。通过windbg命令来看下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dt pc</span><br><span class="line">Local var @ 0x53fe9c Type CC*</span><br><span class="line">0x0068be88 </span><br><span class="line">   +0x000 __VFN_table : 0x00919b84 </span><br><span class="line">   +0x004 a                : 0n1</span><br><span class="line">   +0x008 __VFN_table : 0x00919b94 </span><br><span class="line">   +0x00c b                : 0n2</span><br><span class="line">   +0x010 c                : 0n3</span><br></pre></td></tr></table></figure></p><p>运行结果显示，CC的内存分布依次是</p><ol><li>CA的虚函数表指针</li><li>CA的成员变量a</li><li>CB的虚函数表指针</li><li>CB的成员变量b</li><li>CC的成员变量c</li></ol><h3 id="向上转换"><a href="#向上转换" class="headerlink" title="向上转换"></a>向上转换</h3><p>向上转换，即从子类转换为父类，是安全的。先来看看转换后的内存地址和结构。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dt pa</span><br><span class="line">Local var @ 0x53fe98 Type CA*</span><br><span class="line">0x0068be88 </span><br><span class="line">   +0x000 __VFN_table : 0x00919b84 </span><br><span class="line">   +0x004 a                : 0n1</span><br><span class="line">0:000&gt; dt pb</span><br><span class="line">Local var @ 0x53fe94 Type CB*</span><br><span class="line">0x0068be90 </span><br><span class="line">   +0x000 __VFN_table : 0x00919b94 </span><br><span class="line">   +0x004 b                : 0n2</span><br></pre></td></tr></table></figure></p><p>由于CA位于CC的头部，两者地址是一样的，转换是直接转换就可以，但是CB跟CC是有8个字节的偏移的。这个向上转换是静态转换，编译的时候就已经完成，因为编译器知道类的内存结构，在生成汇编代码的时候，只需要偏移8个字节。通过反汇编的代码也说明了这一点。可通过uf main来反汇编整个main函数，下面节选了从pc转换到pb附近的反汇编代码，其中add ecx,8就是处理偏移量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; uf main</span><br><span class="line">   29 00911719 8b4dfc          mov     ecx,dword ptr [ebp-4]</span><br><span class="line">   29 0091171c 83c108          add     ecx,8</span><br><span class="line">   29 0091171f 894dd0          mov     dword ptr [ebp-30h],ecx</span><br><span class="line">   29 00911722 eb07            jmp     sample!main+0x12b (0091172b)</span><br></pre></td></tr></table></figure></p><h3 id="向下转换"><a href="#向下转换" class="headerlink" title="向下转换"></a>向下转换</h3><p>向下转换，即从父类转换到子类，不一定是安全的，因为父类可能仅仅是个父类。本示例中，以为是简单已知的模型，知道是能正确转换，仅为了说明转换的实现原理。这里的类CB转换到类CC，编译器也是通过计算偏移量实现，正好跟向上转换是反向操作，执行代码是sub ecx,8。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; uf main</span><br><span class="line">   32 0091173d 8b4df4          mov     ecx,dword ptr [ebp-0Ch]</span><br><span class="line">   32 00911740 83e908          sub     ecx,8</span><br><span class="line">   32 00911743 894dcc          mov     dword ptr [ebp-34h],ecx</span><br><span class="line">   32 00911746 eb07            jmp     sample!main+0x14f (0091174f)</span><br></pre></td></tr></table></figure></p><h3 id="危险的类型转换"><a href="#危险的类型转换" class="headerlink" title="危险的类型转换"></a>危险的类型转换</h3><p>如果两个类之间没有继承关系，如果使用()进行类型转换的话，编译就只能使用地址强制转换了。这样的操作是非常危险的。我这个例子中，由于CA和CB的内存结构相同，转换后并不会造成崩溃，但是里面的值是交换的。如果程序继续运行，结果可能就是不符合预期的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dt pa31</span><br><span class="line">Local var @ 0x53fe88 Type CA*</span><br><span class="line">0x0068be90 </span><br><span class="line">   +0x000 __VFN_table : 0x00919b94 </span><br><span class="line">   +0x004 a                : 0n2</span><br><span class="line">0:000&gt; dt pb31</span><br><span class="line">Local var @ 0x53fe84 Type CB*</span><br><span class="line">0x0068be88 </span><br><span class="line">   +0x000 __VFN_table : 0x00919b84 </span><br><span class="line">   +0x004 b                : 0n1</span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>类的类型转换，在实际使用过程中，很容易造成各种问题。如果使用了多重继承，更是加大了出现问题的概率。了解了多重继承的原理，我们在实际调试中，才能更好去调试软件的异常，从而修复并规避相关问题的出现。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;windbg是windows平台下C++开发调试的工具，常用于分析软件崩溃，也是学习C++开发的利器。windbg功能很强大，通过它的命令，
      
    
    </summary>
    
    
      <category term="Windbg" scheme="https://bingoli.github.io/tags/Windbg/"/>
    
      <category term="C++" scheme="https://bingoli.github.io/tags/C/"/>
    
      <category term="多重继承" scheme="https://bingoli.github.io/tags/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>使用Windbg分析C++的虚函数表原理</title>
    <link href="https://bingoli.github.io/2019/03/21/virtual-table-by-windbg/"/>
    <id>https://bingoli.github.io/2019/03/21/virtual-table-by-windbg/</id>
    <published>2019-03-21T23:24:29.000Z</published>
    <updated>2020-03-09T16:53:10.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要想学好C++，就得熟悉C++对象模型。如果能利用好调试工具，比如windbg、GDB等，就能够更快速的掌握C++对象模型原理。本系列文章是通过windbg来深入分析C++对象原理，以便更好的理解C++相关知识点。<br>说明：为了实现方便，所有源码会采用了C++11的语法，编译环境为VS2017，默认编译选项为Win32。</p><h2 id="检测虚函数表指针大小"><a href="#检测虚函数表指针大小" class="headerlink" title="检测虚函数表指针大小"></a>检测虚函数表指针大小</h2><p>根据C++对象的知识可知，存在虚函数的类对象实例会多出1个一个指向虚函数表的指针，下面就先用代码来测试一下，其中类CA不存在虚函数，类CB存在虚函数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CA</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fun1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fun2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fun3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fun4</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CB</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Fun1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Fun2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fun3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fun4</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CA* pa = <span class="keyword">new</span> CA();</span><br><span class="line">    pa-&gt;Fun1();</span><br><span class="line">    pa-&gt;Fun2();</span><br><span class="line">    pa-&gt;Fun3();</span><br><span class="line">    pa-&gt;Fun4();</span><br><span class="line"></span><br><span class="line">    CB* pb = <span class="keyword">new</span> CB();</span><br><span class="line">    pb-&gt;Fun1();</span><br><span class="line">    pb-&gt;Fun2();</span><br><span class="line">    pb-&gt;Fun3();</span><br><span class="line">    pb-&gt;Fun4();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Size of Pointer : "</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">void</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Size of CA : "</span> &lt;&lt; <span class="keyword">sizeof</span>(*pa) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Size of CB : "</span> &lt;&lt; <span class="keyword">sizeof</span>(*pb) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> pa;</span><br><span class="line">    pa = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">delete</span> pb;</span><br><span class="line">    pb = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在win32下的运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Size of Pointer : 4</span><br><span class="line">Size of CA : 4</span><br><span class="line">Size of CB : 8</span><br></pre></td></tr></table></figure></p><p>从运行结果来看，CB的实例比CA的实例多出了4个字节，即一个指针的大小。通过VS的基本查看变量功能，我们无法看到虚函数表指针的值，也就看不到虚函数表的内容，需要用更专业的软件来看。下面，我们就用windbg来分析下虚函数表的具体内容。</p><h2 id="使用Windbg分析虚函数表"><a href="#使用Windbg分析虚函数表" class="headerlink" title="使用Windbg分析虚函数表"></a>使用Windbg分析虚函数表</h2><p>在使用windbg之前，先编译上面的代码，生成了exe文件。本文的示例代码生成的是sample1.exe，后续用到的模块名称都是sample1。</p><h3 id="1-使用windbg打开exe"><a href="#1-使用windbg打开exe" class="headerlink" title="1. 使用windbg打开exe"></a>1. 使用windbg打开exe</h3><p>打开windbg，可Ctrl+E找到sample1.exe所在位置，把exe打开。打开之后，进程会暂停在进入main函数之前。这时候，我们可以设置断点，之后再运行。</p><h3 id="2-设置断点"><a href="#2-设置断点" class="headerlink" title="2. 设置断点"></a>2. 设置断点</h3><p>设置断点需要知道要断点的代码的运行地址，这个地址可以通过x命令来模糊查询，比如我这次操作就是先查找main函数的地址，然后在main的入口处打断点，运行后，windbg会自动显示代码，就可以在左侧代码中通过界面来设置断点了。我把断点打在了pb创建之后的下一行代码上。<br>查找main函数的命令如下。其中类似0:000&gt;开头的，是我输入的命令，其他的是输入命令后的运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; X sample1!main*</span><br><span class="line">*** WARNING: Unable to verify checksum for sample1.exe</span><br><span class="line">00a25fd0          sample1!main (void)</span><br><span class="line">00a22bf0          sample1!mainCRTStartup (void)</span><br><span class="line">0:000&gt; bp 00a25fd0</span><br><span class="line">0:000&gt; g</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">eax=10104750 ebx=003d3000 ecx=00000001 edx=00a2c73c esi=00a212b7 edi=00a212b7</span><br><span class="line">eip=00a25fd0 esp=0053fec8 ebp=0053fed8 iopl=0         nv up ei pl nz na pe nc</span><br><span class="line">cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206</span><br><span class="line">sample1!main:</span><br><span class="line">00a25fd0 55              push    ebp</span><br></pre></td></tr></table></figure></p><p>在pb创建之后设置好断点之后，再次输入g命令，程序会继续暂停。</p><h3 id="3-对比类实例的值"><a href="#3-对比类实例的值" class="headerlink" title="3. 对比类实例的值"></a>3. 对比类实例的值</h3><p>在当前的程序中，已经创建了pa和pb，可以通过dt命令来看下两个变量的详细信息，从下面的结果可以看出，pb比pa多了一个虚函数表指针。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dt pa</span><br><span class="line">Local var @ 0x53fec0 Type CA*</span><br><span class="line">0x0006a6a8 </span><br><span class="line">   +0x000 a                : 0n1</span><br><span class="line">0:000&gt; dt pb</span><br><span class="line">Local var @ 0x53febc Type CB*</span><br><span class="line">0x00065c70 </span><br><span class="line">   +0x000 __VFN_table : 0x00a29b7c </span><br><span class="line">   +0x004 b                : 0n2</span><br></pre></td></tr></table></figure></p><h3 id="4-查看虚函数表内容"><a href="#4-查看虚函数表内容" class="headerlink" title="4. 查看虚函数表内容"></a>4. 查看虚函数表内容</h3><p>从上面的结果看出，pb的虚函数表的指针是0x00a29b7c，可通过dt查看pb的虚函数表内容。从dt的输出结果看，没有看到完整的信息。因此，可以通过dd命令查看虚函数表的内存，在用dt命令查看对应内存的信息。通过结果看出，虚函数表里的两个函数，就是pb的两个虚函数Fun1和Fun2。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dt 0x00a29b7c </span><br><span class="line">CB::`vftable&apos;</span><br><span class="line">[3] 0x00a21307 </span><br><span class="line"> void  sample1!ILT+770(?Fun1CBUAEXXZ)+0( void )</span><br><span class="line">0:000&gt; dd 0x00a29b7c </span><br><span class="line">00a29b7c  00a21307 00a2130c 00000000 00000000</span><br><span class="line">00a29b8c  00000000 00000000 00a2a8b8 00a210dc</span><br><span class="line">00a29b9c  00000000 00a2a910 00a21159 00a21294</span><br><span class="line">00a29bac  00000000 6e6b6e55 206e776f 65637865</span><br><span class="line">00a29bbc  6f697470 0000006e 00000000 00a2a968</span><br><span class="line">00a29bcc  00a21131 00a21294 00000000 20646162</span><br><span class="line">00a29bdc  6f6c6c61 69746163 00006e6f 00000000</span><br><span class="line">00a29bec  00a2a9c4 00a21203 00a21294 00000000</span><br><span class="line">0:000&gt; dt 00a21307 </span><br><span class="line">ILT+770(?Fun1CBUAEXXZ)</span><br><span class="line">Symbol  not found.</span><br><span class="line">0:000&gt; dt 00a2130c </span><br><span class="line">ILT+775(?Fun2CBUAEXXZ)</span><br><span class="line">Symbol  not found.</span><br></pre></td></tr></table></figure></p><h3 id="5-进一步分析虚函数表"><a href="#5-进一步分析虚函数表" class="headerlink" title="5. 进一步分析虚函数表"></a>5. 进一步分析虚函数表</h3><p>x命令可以查询程序中的符号的信息，下面我使用x查询了CA和CB相关的符号信息。其中，CB的虚函数表指针，跟pb中的虚函数表地址是一样的，说明所有类实例共用一个虚函数表，这个也可以通过再创建一个类对象来验证。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; x sample1!CA::*</span><br><span class="line">00a22260          sample1!CA::Fun1 (void)</span><br><span class="line">00a21ca0          sample1!CA::Fun2 (void)</span><br><span class="line">00a21850          sample1!CA::Fun3 (void)</span><br><span class="line">00a21830          sample1!CA::Fun4 (void)</span><br><span class="line">00a21e10          sample1!CA::CA (void)</span><br><span class="line">0:000&gt; x sample1!CB::*</span><br><span class="line">00a29b7c          sample1!CB::`vftable&apos; = &lt;function&gt; *[3]</span><br><span class="line">00a21ef0          sample1!CB::Fun3 (void)</span><br><span class="line">00a21cf0          sample1!CB::Fun2 (void)</span><br><span class="line">00a21800          sample1!CB::Fun1 (void)</span><br><span class="line">00a21cc0          sample1!CB::Fun4 (void)</span><br><span class="line">00a21e40          sample1!CB::CB (void)</span><br><span class="line">00a2a830          sample1!CB::`RTTI Base Class Array&apos; = &lt;no type information&gt;</span><br><span class="line">00a2a81c          sample1!CB::`RTTI Class Hierarchy Descriptor&apos; = &lt;no type information&gt;</span><br><span class="line">00a2a838          sample1!CB::`RTTI Base Class Descriptor at (0,-1,0,64)&apos; = &lt;no type information&gt;</span><br><span class="line">00a2a804          sample1!CB::`RTTI Complete Object Locator&apos; = &lt;no type information&gt;</span><br></pre></td></tr></table></figure></p><p>通过上面的结果看出，CB::Fun1的地址是00a21800，跟pb的虚函数表里的00a21307地址不相同的。然而，我通过uf命令，发现这反汇编出来的函数是一样的。这又是怎么回事呢？先来看看反汇编的结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; uf 0xa21307</span><br><span class="line">sample1!CB::Fun1 [c:\bingo\github\samples\cplusplus\inside-object\sample2\main.cpp @ 15]:</span><br><span class="line">   15 00a21800 55              push    ebp</span><br><span class="line">   15 00a21801 8bec            mov     ebp,esp</span><br><span class="line">   15 00a21803 51              push    ecx</span><br><span class="line">   15 00a21804 c745fccccccccc  mov     dword ptr [ebp-4],0CCCCCCCCh</span><br><span class="line">   15 00a2180b 894dfc          mov     dword ptr [ebp-4],ecx</span><br><span class="line">   15 00a2180e 8be5            mov     esp,ebp</span><br><span class="line">   15 00a21810 5d              pop     ebp</span><br><span class="line">   15 00a21811 c3              ret</span><br><span class="line"></span><br><span class="line">sample1!ILT+770(?Fun1CBUAEXXZ):</span><br><span class="line">00a21307 e9f4040000      jmp     sample1!CB::Fun1 (00a21800)  Branch</span><br></pre></td></tr></table></figure></p><p>从反汇编的结果来看，00a21800是CB::Fun1的入口地址，而0xa21307指向的值是跳转到CB::Fun1函数的命令，也就是说，虚函数表保存的是一个跳转命令。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过windbg工具辅助，把很多VS不能显示信息展示出来，能够了解更多C++虚函数表的实现细节，对掌握C++的相关原理很有帮助。后续，我还会用windbg分析更多的实例。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;要想学好C++，就得熟悉C++对象模型。如果能利用好调试工具，比如windbg、GDB等，就能够更快速的掌握C++对象模型原理。本系列文章是
      
    
    </summary>
    
    
      <category term="Windbg" scheme="https://bingoli.github.io/tags/Windbg/"/>
    
      <category term="C++" scheme="https://bingoli.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的Date类的函数特殊处理导致的问题</title>
    <link href="https://bingoli.github.io/2019/03/20/js-date-error/"/>
    <id>https://bingoli.github.io/2019/03/20/js-date-error/</id>
    <published>2019-03-20T22:49:06.000Z</published>
    <updated>2020-03-09T16:53:10.799Z</updated>
    
    <content type="html"><![CDATA[<p>记得以前参加校招的时候，总是有日期相关的面试题，比如计算两个日期之间的间隔天数。以前还觉得这种题就是为了纯粹为了面试的，但工作了之后，还就碰到了跟日期相关的bug。下面是一段js代码，是要把字符串描述的日期转换为Date类型的函数。其中，字符串的格式为年占用4个字符，月份2个字符，天数2个字符，小时2个字符，分钟2个字符，秒数2个字符。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2Date</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> year = <span class="built_in">parseInt</span>(str.substr(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="comment">// Month value range is [0, 11]</span></span><br><span class="line">    <span class="keyword">var</span> month = <span class="built_in">parseInt</span>(str.substr(<span class="number">4</span>, <span class="number">2</span>)) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> day = <span class="built_in">parseInt</span>(str.substr(<span class="number">6</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">var</span> hour = <span class="built_in">parseInt</span>(str.substr(<span class="number">8</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">var</span> minute = <span class="built_in">parseInt</span>(str.substr(<span class="number">10</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">var</span> second = <span class="built_in">parseInt</span>(str.substr(<span class="number">12</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    date.setYear(year);</span><br><span class="line">    date.setMonth(month);</span><br><span class="line">    date.setDate(day);</span><br><span class="line">    date.setHours(hour);</span><br><span class="line">    date.setMinutes(minute);</span><br><span class="line">    date.setSeconds(second);</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str2Date(<span class="string">'20150515180000'</span>).toString());</span><br><span class="line"><span class="built_in">console</span>.log(str2Date(<span class="string">'20160229235959'</span>).toString());</span><br><span class="line"><span class="built_in">console</span>.log(str2Date(<span class="string">'20171231235959'</span>).toString());</span><br><span class="line"><span class="built_in">console</span>.log(str2Date(<span class="string">'20181101000000'</span>).toString());</span><br></pre></td></tr></table></figure></p><p>今天的日期是2019年3月20日，以上代码的测试用例运行结果全部正常。输出结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fri May 15 2015 18:00:00 GMT+0800 (CST)</span><br><span class="line">Mon Feb 29 2016 23:59:59 GMT+0800 (CST)</span><br><span class="line">Sun Dec 31 2017 23:59:59 GMT+0800 (CST)</span><br><span class="line">Thu Nov 01 2018 00:00:00 GMT+0800 (CST)</span><br></pre></td></tr></table></figure></p><p>但是在某个特定日期(月末），就发现这段代码的运行结果出错了。原来，new Date()生成的值是运行时的时间，在不同的时间，运行的结果是不同的。下面来看一个特定日期的运行结果。把第10行代码中的new Date的初始化，设置日期为2019年3月31日。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-03-31 00:00:00'</span>);</span><br></pre></td></tr></table></figure></p><p>修改之后的运行结果如下，有两个用例的运行结果是不符合预期的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fri May 15 2015 18:00:00 GMT+0800 (CST)</span><br><span class="line">Tue Mar 29 2016 23:59:59 GMT+0800 (CST)</span><br><span class="line">Sun Dec 31 2017 23:59:59 GMT+0800 (CST)</span><br><span class="line">Sat Dec 01 2018 00:00:00 GMT+0800 (CST)</span><br></pre></td></tr></table></figure></p><p>那究竟是怎么回事呢？只能逐步调试来看下哪一步出了问题。因为是日期错了，我这里通过日志把改变日期值的中间过程都打印出来。下面以第2个用例（2016年2月29日）调试看下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2Date</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> year = <span class="built_in">parseInt</span>(str.substr(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="comment">// Month value range is [0, 11]</span></span><br><span class="line">    <span class="keyword">var</span> month = <span class="built_in">parseInt</span>(str.substr(<span class="number">4</span>, <span class="number">2</span>)) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> day = <span class="built_in">parseInt</span>(str.substr(<span class="number">6</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">var</span> hour = <span class="built_in">parseInt</span>(str.substr(<span class="number">8</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">var</span> minute = <span class="built_in">parseInt</span>(str.substr(<span class="number">10</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">var</span> second = <span class="built_in">parseInt</span>(str.substr(<span class="number">12</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-03-31 00:00:00'</span>);</span><br><span class="line">    date.setYear(year);</span><br><span class="line">    <span class="built_in">console</span>.log(date.toString());</span><br><span class="line">    date.setMonth(month);</span><br><span class="line">    <span class="built_in">console</span>.log(date.toString());</span><br><span class="line">    date.setDate(day);</span><br><span class="line">    <span class="built_in">console</span>.log(date.toString());</span><br><span class="line">    date.setHours(hour);</span><br><span class="line">    date.setMinutes(minute);</span><br><span class="line">    date.setSeconds(second);</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出的结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thu Mar 31 2016 00:00:00 GMT+0800 (CST)</span><br><span class="line">Wed Mar 02 2016 00:00:00 GMT+0800 (CST)</span><br><span class="line">Tue Mar 29 2016 00:00:00 GMT+0800 (CST)</span><br><span class="line">Tue Mar 29 2016 23:59:59 GMT+0800 (CST)</span><br></pre></td></tr></table></figure></p><p>从输出结果来看SetMonth这一步就出错了。原来在当前场景下，调用SetMonth设置的月份，会导致预期时间是一个不合法的时间，而Date类进行了自动的纠正，也就改变了月份的值。后面又重新设置了天数，是合法值，Date不再对日期进行改变，最终就导致月份是错误的。<br>通过查询MDN文档，发现setFullYear函数是可以把年月日都作为参数输入，这样就能保证日期的完整性，特殊日期也不会出错。修改后的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2Date</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> year = <span class="built_in">parseInt</span>(str.substr(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="comment">// Month value range is [0, 11]</span></span><br><span class="line">    <span class="keyword">var</span> month = <span class="built_in">parseInt</span>(str.substr(<span class="number">4</span>, <span class="number">2</span>)) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> day = <span class="built_in">parseInt</span>(str.substr(<span class="number">6</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">var</span> hour = <span class="built_in">parseInt</span>(str.substr(<span class="number">8</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">var</span> minute = <span class="built_in">parseInt</span>(str.substr(<span class="number">10</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">var</span> second = <span class="built_in">parseInt</span>(str.substr(<span class="number">12</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-03-31 00:00:00'</span>);</span><br><span class="line">    date.setFullYear(year, month, day);</span><br><span class="line">    date.setHours(hour, minute, second);</span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str2Date(<span class="string">'20150515180000'</span>).toString());</span><br><span class="line"><span class="built_in">console</span>.log(str2Date(<span class="string">'20160229235959'</span>).toString());</span><br><span class="line"><span class="built_in">console</span>.log(str2Date(<span class="string">'20171231235959'</span>).toString());</span><br><span class="line"><span class="built_in">console</span>.log(str2Date(<span class="string">'20181101000000'</span>).toString());</span><br></pre></td></tr></table></figure></p><p>通过这个例子说明，每个函数的异常处理都有可能导致最终的结果出错，如果使用了系统函数或者其他库的函数，都需要对每个函数的异常处理有足够的了解，才能保证结果符合预期。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记得以前参加校招的时候，总是有日期相关的面试题，比如计算两个日期之间的间隔天数。以前还觉得这种题就是为了纯粹为了面试的，但工作了之后，还就碰到了跟日期相关的bug。下面是一段js代码，是要把字符串描述的日期转换为Date类型的函数。其中，字符串的格式为年占用4个字符，月份2
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://bingoli.github.io/tags/javascript/"/>
    
      <category term="date" scheme="https://bingoli.github.io/tags/date/"/>
    
  </entry>
  
  <entry>
    <title>ssh免密码快速登录配置</title>
    <link href="https://bingoli.github.io/2019/03/18/ssh-save-password/"/>
    <id>https://bingoli.github.io/2019/03/18/ssh-save-password/</id>
    <published>2019-03-18T22:55:44.000Z</published>
    <updated>2020-03-09T16:53:10.799Z</updated>
    
    <content type="html"><![CDATA[<p>使用ssh登录服务器的时候，需要输入ip地址、端口、用户名、密码等信息，比较麻烦，容易输错。还好，通过客户端和服务器的配置参数，可实现免密码快速登录。服务器可通过保存客户端的公钥，用于验证客户端的身份，从而省去输入密码的步骤。客户端也可通过配置服务器参数来简化登录命令。<br>本文主要是记录了ssh面密码快速登录的配置过程，主要分为以下几个步骤。</p><ol><li>客户端生成密钥，包括私钥和公钥。</li><li>在服务器中配置客户端的公钥。</li><li>在客户端配置服务器登录相关参数。</li></ol><p>本文示例中的服务器ip地址为192.168.1.1，ssh端口为22。</p><h2 id="客户端生成密钥"><a href="#客户端生成密钥" class="headerlink" title="客户端生成密钥"></a>客户端生成密钥</h2><p>客户端生成密钥的方法很简单，只需要使用ssh-keygen命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p><p>生成密钥过程中，建议采用默认值，只需要按三次回车之后，就会再～/.ssh目录下生成密钥文件，其中，id_rsa为私钥，id_rsa.pub为公钥。</p><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>服务器的~/.ssh/authorized_keys文件保存可快速连接的客户端的公钥。只需把客户端生成的id_rsa.pub文件的内容拷贝到authorized_keys文件的末尾。拷贝的方法有：</p><ol><li>直接拷贝。由于id_rsa.pub和authorized_keys都是文本文件，可通过拷贝命令直接拷贝。</li><li>把id_rsa.pub上传到服务器，然后再把内容添加到authorized_keys文件中。<br>在客户端把文件上传到服务器的用户目录的操作命令如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@192.168.1.1:</span><br></pre></td></tr></table></figure></li></ol><p>在服务器操作的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p><p>配置好之后，登录服务器就不再需要密码了。</p><h2 id="在客户端配置服务器登录相关参数"><a href="#在客户端配置服务器登录相关参数" class="headerlink" title="在客户端配置服务器登录相关参数"></a>在客户端配置服务器登录相关参数</h2><p>除了密码之外，登录时，还需要配置ip地址、端口、用户等信息，也比较繁琐。可通过客户端的~/.ssh/config配置服务器的相关参数简化登录命令。<br>config文件的配置内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host server</span><br><span class="line">Hostname 192.168.1.1</span><br><span class="line">Port 22</span><br><span class="line">User bingoli</span><br></pre></td></tr></table></figure></p><p>其中，Host为服务器的名称，输入登录命令时使用，后续登录只需要记住这个名字就可以；Hostname为服务器的ip地址；Port为ssh的端口；User为服务器的用户名。配置好相关参数之后，就可以使用简化的命令登录服务器了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh server</span><br></pre></td></tr></table></figure></p><p>从此以后，登录服务器就简单多了。</p><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用ssh登录服务器的时候，需要输入ip地址、端口、用户名、密码等信息，比较麻烦，容易输错。还好，通过客户端和服务器的配置参数，可实现免密码快速登录。服务器可通过保存客户端的公钥，用于验证客户端的身份，从而省去输入密码的步骤。客户端也可通过配置服务器参数来简化登录命令。&lt;b
      
    
    </summary>
    
    
      <category term="ssh" scheme="https://bingoli.github.io/tags/ssh/"/>
    
      <category term="非对称加密" scheme="https://bingoli.github.io/tags/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs的DES加密解密实现</title>
    <link href="https://bingoli.github.io/2018/11/15/crypto-sample/"/>
    <id>https://bingoli.github.io/2018/11/15/crypto-sample/</id>
    <published>2018-11-15T23:11:45.000Z</published>
    <updated>2020-03-09T16:53:10.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>为了保证敏感数据的安全，客户端和服务器除了使用加密协议（如https）传输之外，一般还会再对敏感数据进行加密处理，比如使用DES算法进行加密。客户端和服务器会约定使用相同的加密解密算法，但由于使用不同语言不同基础库，加密解密过程中的一些细节处理会有差异，比如填充值的值。一般客户端和服务器是由不同人的开发，且都是各自负责自己的代码，对对方的代码不太了解，就容易导致在调试过程中花费较多的时间。这时候，就体现出了全栈工程师的优势了，能够较快的把接口调通。今天，我先总结下在服务器使用Nodejs实现DES解密中的一些需要明确的细节。</p><h2 id="DES加密解密示例"><a href="#DES加密解密示例" class="headerlink" title="DES加密解密示例"></a>DES加密解密示例</h2><p>Nodejs的Crypto模块封装了各种加密解密的算法，可以非常方便的使用。我今天选用了DES-CBC算法。<br>加密算法的调用过程中如下：</p><ol><li>通过crypto.createCipheriv创建一个加密对象。</li><li>通过cipher.update对原始数据进行加密，并根据设定的编码方式输出部分密文。update可以调用多次，并需要把每次输出的密文合并到一起。</li><li>调用cipher.final对最后剩余的数据进行加密，并输出剩余的密文，和之前update输出的密文合并，就是最终的完整密文。<br>解密过程跟加密过程是类似的步骤。</li></ol><p>加密解密的示例代码如下所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">plainText, key, iv</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cipher = crypto.createCipheriv(<span class="string">'des-cbc'</span>, key, iv);</span><br><span class="line">    cipher.setAutoPadding(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">var</span> encryptedText = cipher.update(plainText, <span class="string">'utf8'</span>, <span class="string">'base64'</span>);</span><br><span class="line">    encryptedText += cipher.final(<span class="string">'base64'</span>);</span><br><span class="line">    <span class="keyword">return</span> encryptedText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">encryptedText, key, iv</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> decipher = crypto.createDecipheriv(<span class="string">'des-cbc'</span>, key, iv);</span><br><span class="line">    decipher.setAutoPadding(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">var</span> plainText = decipher.update(encryptedText, <span class="string">'base64'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    plainText += decipher.final(<span class="string">'utf8'</span>);</span><br><span class="line">    <span class="keyword">return</span> plainText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testEncryptAndDecrypt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="string">"12345678"</span>;</span><br><span class="line">    <span class="keyword">var</span> iv = <span class="string">"abcdefgh"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> plainText = <span class="string">"Hello World!"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Origin Text: %s"</span>, plainText);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> encryptedText = encrypt(plainText, key, iv);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Encrypted Text: %s"</span>, encryptedText);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> decryptedText = decrypt(encryptedText, key, iv);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Decrypted Text: %s"</span>, decryptedText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testEncryptAndDecrypt();</span><br></pre></td></tr></table></figure></p><h2 id="密码的使用"><a href="#密码的使用" class="headerlink" title="密码的使用"></a>密码的使用</h2><p>DES的密码长度必须是8个字节，否则，会抛出异常。在创建加密对象时，如果输入的密码是utf8编码的字符串。如果在密码中使用了一些特殊的字节，并把ASCII码转换为字符串，有可能导致抛出密码长度不对的异常。原因是，转换后的字符串不符合utf8的编码规则。错误的用法示例代码如下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="string">"\xff\xff\xff\xff\xff\xff\xff\xff"</span>;</span><br></pre></td></tr></table></figure></p><p>如果要使用这些字节作为密码，那输入密码的时候，就需要改用TypedArray，比如Int8Array。示例代码如下所示。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="keyword">new</span> <span class="built_in">Int8Array</span>([<span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>]);</span><br></pre></td></tr></table></figure></p><p>其中，iv的长度必须是8个字节，其使用方法跟密码相似。</p><h2 id="自动填充字段"><a href="#自动填充字段" class="headerlink" title="自动填充字段"></a>自动填充字段</h2><p>DES解密算法是对称性的块加密算法，每个块的长度为8个字节。可通过cipher设置是否使用自动填充补齐8个字节，如果不使用自动填充，就需要保证输入数据的字节数是8的倍数，否则会抛出异常。如果使用自动填充，在调用cipher.final的时候，会采用PCKS5 Padding模式对数据进行自动填充。填充数据的值是一共填充的字节数量对应的ASCII码，即缺几个字节，填充的值就是几。需要注意的是，如果输入的数据的字节数正好是8的倍数，那样也会填充8个字节。填充的数据只会是下面的8种，其中<em>为原来的数据。<br><strong>**</strong></em>1<br><strong>**</strong>22<br><strong>*</strong>333<br><strong>*<em>4444</em></strong>55555<br>*<em>666666</em>7777777<br>88888888</p><h2 id="Buffer的使用"><a href="#Buffer的使用" class="headerlink" title="Buffer的使用"></a>Buffer的使用</h2><p>如果单纯使用加密算法转化出来的密文，可能会存在一些不可见的字符，比如填充值。而Nodejs的Buffer类正好可以帮助解决这个问题。通过Buffer可以实现多种不同编码的转换。而在cipher.update和final函数中设置了输出参数的编码方式，就会直接转换为字符串。Buffer可以作为字符串编码转换的工具，如base64的编码和解码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64Encode</span>(<span class="params">utf8String</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(utf8String, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="keyword">return</span> buffer.toString(<span class="string">'base64'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64Decode</span>(<span class="params">base64String</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(base64String, <span class="string">'base64'</span>);</span><br><span class="line">    <span class="keyword">return</span> buffer.toString(<span class="string">'utf8'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Nodejs使用起来非常方便，尤其是C++程序员感受明显。同样是加密解密，用C++实现就需要费一番周折，而且一不小心，就容易写出问题。在使用C++编程的时候，就特别希望也能多存在一些这种类似库的封装。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://nodejs.org/api/crypto.html" target="_blank" rel="noopener">NodeJS开发文档</a></li></ul><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p>微信公众号：程序员bingo<br><img src="https://bingoli.github.io/wechat.jpeg" alt="微信公众号：程序员bingo"><br>Blog: <a href="https://bingoli.github.io/">https://bingoli.github.io/</a><br>GitHub: <a href="https://github.com/bingoli" target="_blank" rel="noopener">https://github.com/bingoli</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;为了保证敏感数据的安全，客户端和服务器除了使用加密协议（如https）传输之外，一般还会再对敏感数据进行加密处理，比如使用DES算法进行加密
      
    
    </summary>
    
    
      <category term="crypto" scheme="https://bingoli.github.io/tags/crypto/"/>
    
      <category term="Node.js" scheme="https://bingoli.github.io/tags/Node-js/"/>
    
      <category term="DES" scheme="https://bingoli.github.io/tags/DES/"/>
    
  </entry>
  
</feed>
